#!/usr/bin/env python

import hashlib
from hashlib import sha1
import hmac
import base64
import time
from datetime import datetime
from datetime import timezone
import requests
import os
import json
import sys
from queue import Queue, Empty
import paho.mqtt.client as mqtt 

sys.path.insert(1, '/home/pi/config')
from setup import *


prevTimestamp=0
sunrise = 0
sunset = sys.maxsize

def on_message(client, userdata, message):
    msgqueue.put(message.payload)


def logger(client, userdata, level, buff):
    print("level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        connected = True
    else:
        print("connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    client.reconnect()

def on_publish(client,userdata,result):
    pass

def processData(data):
    global sunrise, sunset
    msg = json.loads(data)
    sunrise = int(msg['sunriseEpoch'])
    sunset = int(msg['sunsetEpoch'])
    


def queryCloud():
    VERB="POST"
    Content_Type = "application/json"
    KeyId = solis_credentials.key
    secretKey = solis_credentials.secret
    CanonicalizedResource = "/v1/api/inveterDetail"
    Body='{"id":' + solis_credentials.userid + ', "sn":' + solis_credentials.serialnumber + '}' # userId = id number from the url bar of your inverter detail page; sn = the serial number of your inverter
    Content_MD5 = base64.b64encode(hashlib.md5(Body.encode('utf-8')).digest()).decode('utf-8')

    now = datetime.now(timezone.utc)
    Date = now.strftime("%a, %d %b %Y %H:%M:%S GMT")

    encryptStr = (VERB + "\n"
        + Content_MD5 + "\n"
        + Content_Type + "\n"
        + Date + "\n"
        + CanonicalizedResource)

    h = hmac.new(secretKey.encode('utf-8'), msg=encryptStr.encode('utf-8'), digestmod=hashlib.sha1)

    Sign = base64.b64encode(h.digest())

    Authorization = "API " + KeyId + ":" + Sign.decode('utf-8')

    requestStr = (VERB + " " + CanonicalizedResource + "\n"
        + "Content-MD5: " + Content_MD5 + "\n"
        + "Content-Type: " + Content_Type + "\n"
        + "Date: " + Date + "\n"
        + "Authorization: "+ Authorization + "\n"
        + "Bodyï¼š" + Body)

    header = { "Content-MD5":Content_MD5,
                "Content-Type":Content_Type,
                "Date":Date,
                "Authorization":Authorization
                }

    url = 'https://www.soliscloud.com:13333'
    req = url + CanonicalizedResource
    # add exception handling for requests.post!
    try:
        ret = requests.post(req, data=Body, headers=header)

    except requests.exceptions.HTTPError as errh:
        ret.status_code = 529
        ret.reason = "Site is overloaded"

    except requests.exceptions.ReadTimeout as errrt:
        ret.status_code = 408
        ret.reason = "Request timeout"

    return ret


def publishError(code, reason):
    now = int(time.time())

    jsonRec = {
        "id"      :      "solarerror",
        "dev"     :      solis_credentials.serialnumber,
        "ts"      :      now,
        "category":      "http",
        "code"    :      code,
        "description" :  reason
    }
    topic = mqtt_broker.topic_prefix + "/error/solarpower/" + solis_credentials.serialnumber
    try:
        client.publish(topic, json.dumps(jsonRec), qos=0, retain=True)
    except:
        print("mqtt publish of error failed")


def publishData(recData):
    global prevTimestamp

    ret = False
    myData = recData['data']

    if myData.get('dataTimestamp') is None:
        return 120

    ts = int(myData['dataTimestamp']) 
    now = int(time.time()) * 1000
    diff = now - ts
    print(datetime.now(), "now=", now, "datats=", ts, "diff=",diff,"datadiff=", ts - prevTimestamp)

    if (ts != prevTimestamp):
        prevTimestamp = ts

        jsonRec = {
            "id"     :      "solarpower",
            "dev"    :      solis_credentials.serialnumber,
            "ts"     :      int(ts / 1000), 
            "string1": {
                "power" :      myData['pow1'],
                "current":     myData['iPv1'],
                "voltage":     myData['uPv1']
            },    
            "string2": {
                "power" :      myData['pow2'],
                "current":     myData['iPv2'],
                "voltage":     myData['uPv2']
            },
            "grid": {
                "freq": myData['fac'],
                "phases" : [ 
                    {
                        "voltage": myData['uAc1'],
                        "current": myData['iAc1']
                    },
                    {
                        "voltage": myData['uAc2'],
                        "current": myData['iAc2']
                    },
                    {
                        "voltage": myData['uAc3'],
                        "current": myData['iAc3']
                    }
                ]
            },
            "energy_today" : myData['eToday'],
            "acpower":      myData['pac'],
            "inverter_temp" : myData['inverterTemperature']
        }
        topic = mqtt_broker.topic_prefix + "/" + solis_credentials.serialnumber + "/solarpower"
        try:
            client.publish(topic, json.dumps(jsonRec), qos=0, retain=True)
        except:
            print("mqtt publish failed")

    wait = 420 - int(diff / 1000)
    if (wait < 3 ):
        wait = 15
    if ts - prevTimestamp == 0 and int(diff / 1000) > 400:
        wait = 120
    return wait


msgqueue = Queue(maxsize=4)    
pid = os.getpid()
client = mqtt.Client("solar inverter reader" + str(pid)) #create new instance
client.on_connect = on_connect
client.on_message=on_message
client.on_publish=on_publish
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()

client.subscribe(mqtt_broker.topic_prefix + "/celestials")


waitTime = 3 # wait enough to get celestials first

while True:
    now = int(time.time())
    print(datetime.now(), "sunrise",sunrise,"now",now,"sunset", sunset)
    if sunset < now or sunrise + 1800 > now:
        print(datetime.now(),"It is nighttime, dont query solarpanel data")
        if (sunrise < now):
            waitTime = sunrise + 86400 + 1800 - now # we are in the evening, sunrise is actually this morning
        else:                                       # Using this morning to estimate tomorrow sunrise.
            waitTime = sunrise + 1800 - now         # Day has changed, midnight has passed, sunrise is exact.
    try:
        print(datetime.now(), "wait is", waitTime, "seconds")
        if waitTime < 0:
            waitTime = 60
        data = msgqueue.get(block=True, timeout=waitTime)
        if data is None:
            continue
        processData(data)

    except Empty:
        print(datetime.now(),"query")
        x = queryCloud()
        if x.status_code == 200:
            waitTime = publishData(x.json())
        else:
            publishError(x.status_code, x.reason)
            waitTime = 60
    
    except KeyboardInterrupt:
        client.disconnect()
        exit(0)
