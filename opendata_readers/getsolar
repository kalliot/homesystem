#!/usr/bin/env python

import asyncio
import json
import time
import sys
import os
from datetime import datetime
from aiohttp import ClientSession
import paho.mqtt.client as mqtt 
from soliscloud_api import SoliscloudAPI

sys.path.insert(1, '/home/pi/config')
from setup import *

prevTimestamp = 0


def publishData(myData):
    global prevTimestamp

    if myData.get('dataTimestamp') is None:
        return 120

    ts = int(myData['dataTimestamp']) 
    now = int(time.time()) * 1000
    diff = now - ts
    print(datetime.now(), "now=", now, "datats=", ts, "diff=",diff,"datadiff=", ts - prevTimestamp)

    if (ts != prevTimestamp):
        prevTimestamp = ts

        jsonRec = {
            "id"     :      "solarpower",
            "dev"    :      solis_credentials.serialnumber,
            "ts"     :      int(ts / 1000), 
            "string1": {
                "power" :      myData['pow1'],
                "current":     myData['iPv1'],
                "voltage":     myData['uPv1']
            },    
            "string2": {
                "power" :      myData['pow2'],
                "current":     myData['iPv2'],
                "voltage":     myData['uPv2']
            },
            "grid": {
                "freq": myData['fac'],
                "phases" : [ 
                    {
                        "voltage": myData['uAc1'],
                        "current": myData['iAc1']
                    },
                    {
                        "voltage": myData['uAc2'],
                        "current": myData['iAc2']
                    },
                    {
                        "voltage": myData['uAc3'],
                        "current": myData['iAc3']
                    }
                ]
            },
            "energy_today" : myData['eToday'],
            "acpower":      myData['pac'],
            "inverter_temp" : myData['inverterTemperature']
        }
        topic = mqtt_broker.topic_prefix + "/" + str(solis_credentials.serialnumber) + "/solarpower"
        try:
            client.publish(topic,json.dumps(jsonRec), qos=0, retain=True)
        except:
            print(datetime.now(),"mqtt publish failed")

    wait = 420 - int(diff / 1000)
    if (wait < 3 ):
        wait = 15
    if ts - prevTimestamp == 0 and int(diff / 1000) > 400:
        wait = 120
    return wait

def processData(data):
    global sunrise, sunset
    msg = json.loads(data)
    sunrise = int(msg['sunriseEpoch'])
    sunset = int(msg['sunsetEpoch'])
    print(datetime.now(), "got clestials: sunrise", sunrise, "sunset", sunset)


def on_message(client, userdata, message):
    processData(message.payload)


def logger(client, userdata, level, buff):
    print(datetime.now(), "level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        connected = True
    else:
        print(datetime.now(), "connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    client.reconnect()

def on_publish(client,userdata,result):
    pass

    
async def fetchSolar():
    global sunrise, sunset

    while True:
        waitTime = 120
        async with ClientSession() as websession:
            try:
                soliscloud = SoliscloudAPI('https://soliscloud.com:13333', websession)
                inverter_detail = await soliscloud.inverter_detail(solis_credentials.key, 
                                                                   solis_credentials.secret, 
                                                                   inverter_sn = solis_credentials.serialnumber)
            except (
                SoliscloudAPI.SolisCloudError,
                SoliscloudAPI.HttpError,
                SoliscloudAPI.TimeoutError,
                SoliscloudAPI.ApiError,
            ) as error:
                print(datetime.now(), "Error:", error)
            else:
                waitTime = publishData(inverter_detail)


        now = int(time.time())
        print(datetime.now(), "sunrise",sunrise,"now",now,"sunset", sunset)
        if sunset < now or sunrise + 1800 > now:
            print(datetime.now(),"It is nighttime, dont query solarpanel data")
            if ((sunrise + 1800) < now):
                waitTime = sunrise + 86400 + 1800 - now # we are in the evening, sunrise is actually this morning
            else:                                       # Using this morning to estimate tomorrow sunrise.
                waitTime = sunrise + 1800 - now         # Day has changed, midnight has passed, sunrise is exact.

            print(datetime.now(), "wait is", waitTime, "seconds")
            if waitTime < 0:
                waitTime = 60

        print(datetime.now(), "waiting", waitTime, "seconds")
        await asyncio.sleep(waitTime)



pid = os.getpid()
client = mqtt.Client("solar inverter reader" + str(pid)) #create new instance
client.on_connect = on_connect
client.on_message = on_message
client.on_publish = on_publish
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()

client.subscribe(mqtt_broker.topic_prefix + "/celestials")

loop = asyncio.get_event_loop()
task = loop.create_task(fetchSolar())

try:
    loop.run_until_complete(task)
except asyncio.CancelledError:
    pass



