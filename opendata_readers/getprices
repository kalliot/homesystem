#!/usr/bin/env python

import time
from datetime import datetime
import urllib.request
import urllib.error
import requests
import os
import json
import sys
import pytz
import paho.mqtt.client as mqtt 

sys.path.insert(1, '/home/pi/config')
from setup import nordpool, mqtt_broker

pricelimit = 1.0 # if no setup is got, this is so low, that no boosthours are generated
compressor_pricelimit = 1.0
priceratio = 0.95

class priceStats:
    def __init__(self, data, start, maxcnt):
        self.min  = 320
        self.max  = -20
        self.avg  = 0

        hourCnt = 0
        cnt = 0
        sum = 0
        now = int(time.time())
        # first find out min,max and avg from those which are not overpriced.
        for hour in data:
            ts = int(datetime.fromisoformat(hour['DateTime']).timestamp())
            if ((ts % 3600 == 0) and ts > (now - start * 3600)):
                hourCnt += 1
                if hourCnt > maxcnt:
                    break
                price = round(float(hour['PriceWithTax']) * 100, 2)
                cnt += 1
                sum = sum + price
                if (price < self.min):
                    self.min = price
                if (price > self.max):
                    self.max = price

        if sum != 0 and cnt > 0:
            self.avg = sum / cnt



def on_message(client, userdata, message):
    pass


def logger(client, userdata, level, buff):
    print(datetime.now(),"level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        connected = True
    else:
        print(datetime.now(),"connection failed, rc=",rc)       
        connected = False

def on_disconnect(client, userdata, rc):
    client.reconnect()

def on_publish(client,userdata,result):
    pass

def publishError(code, reason):
    now = int(time.time())

    jsonRec = {
        "id"      :      "nordpoolerror",
        "dev"     :      "spot-hinta",
        "ts"      :      now,
        "category":      "http",
        "code"    :      code,
        "description" :  reason
    }
    topic = mqtt_broker.topic_prefix + "/error/elprice"
    try:
        client.publish(topic, json.dumps(jsonRec), qos=0, retain=True)
    except:
        print(datetime.now(),"mqtt publish of error failed")


def strTime(dateTime):
    ts = int(datetime.fromisoformat(dateTime).timestamp())
    return datetime.fromtimestamp(ts).astimezone(pytz.UTC).strftime("%Y%m%d%H")

class specialHour():
    def __init__(self, name):
        self.name = name
        self.times = []
        self.prices = []
        self.reasons = []
        self.tstamps = []
        self.count = 0

    def exists(self, strtime):
        for i in range(self.count):
            if (self.times[i] == strtime):
                return True
        return False


    def addRec(self, strtime,price,reason,tstamp):
        if not strtime in self.times:
            self.times.append(strtime)
            self.prices.append(price)
            self.reasons.append(reason)
            self.tstamps.append(tstamp)
            self.count += 1
        else:
            print("did not add, it already exists", strtime,"price", price)

    def delRec(self, strtime):
        for i in range(self.count):
            try:
                if (self.times[i] == strtime):
                    self.times.pop(i)
                    self.prices.pop(i)
                    self.reasons.pop(i)
                    self.tstamps.pop(i)
                    self.count -= 1
                    break

            except IndexError:
                return

    def clear(self, name):
        for i in range(self.count):
            try:
                if self.reasons[i] != name:
                    print("removing time", self.times[i])
                    self.times.pop(i)
                    self.prices.pop(i)
                    self.reasons.pop(i)
                    self.tstamps.pop(i)
                    self.count -= 1

            except IndexError:
                return


    def publish(self):
        topic = mqtt_broker.topic_prefix + "/elprice/" + self.name
        result = {
                    "id": self.name, "ts": int(time.time()), "values": [
                        {"ts": ts, "time": t, "price": s, "reason": r} for ts, t, s, r in zip(self.tstamps, self.times, self.prices, self.reasons)
                    ]
                }
        client.publish(topic, json.dumps(result), qos=0, retain=True)

cheapHours     = specialHour("awhightemp")
expensiveHours = specialHour("awlowtemp")


def findCheapHoursByRank(data, maxrank):
    now = int(time.time())

    for hour in data:
        ts = int(datetime.fromisoformat(hour['DateTime']).timestamp())
        if ((ts % 3600 == 0) and ts > (now - 3 * 3600)):
            rank = int(hour['Rank'])

            if rank < maxrank +1:
                price = round(float(hour['PriceWithTax']) * 100.0,2)
                cheapHours.addRec(strTime(hour['DateTime']),price,'cheaprank',ts)
                print("adding cheap hour",hour['DateTime'], "by rank, price is", price)


def findExpensiveHoursByRank(data, minrank):
    now = int(time.time())

    for hour in data:
        ts = int(datetime.fromisoformat(hour['DateTime']).timestamp())
        if ((ts % 3600 == 0) and ts > (now - 3 * 3600)):
            rank = int(hour['Rank'])

            if rank > minrank -1:
                price = round(float(hour['PriceWithTax']) * 100.0,2)
                expensiveHours.addRec(strTime(hour['DateTime']),price,'expensiverank',ts)
                print("adding expensive hour",hour['DateTime'], "by rank, price is", price)



def findHeatPumpCheapHours(data):
    global priceratio
    adder = -0.05
    now = int(time.time())

    for i in range(6):
        cnt     = 0
        price   = 0.0
        prevprice = 0.0
        nextPriceRatio = priceratio - 0.5
        prevPriceRatio = priceratio - 0.5
        cheapCnt = 0

        datalen = len(data)
        print(datetime.now(),"datalen=",datalen)

        for hour in data:
            ts = int(datetime.fromisoformat(hour['DateTime']).timestamp())
            if ((ts % 3600 == 0) and ts > (now - 5 * 3600)):
                price = round(float(hour['PriceWithTax']) * 100.0,2)
                if cnt < datalen-1:
                    nextprice = round(float(data[cnt+1]['PriceWithTax']) * 100.0,2)
                else:
                    nextprice = price

                if prevprice != 0:
                    if price == 0:
                        prevPriceRatio = 0.001 / prevprice
                    else:
                        prevPriceRatio = price /  prevprice

                if nextprice != 0:
                    if price == 0:
                        nextPriceRatio = 0.001 / nextprice
                    else:
                        nextPriceRatio = price / nextprice

                if prevprice + adder > price and nextprice + adder > price:  # this is a pit
                    if (prevPriceRatio > priceratio):
                        cheapHours.addRec(strTime(data[cnt-1]['DateTime']),prevprice,'beforebottom',ts-3600)
                    cheapHours.addRec(strTime(hour['DateTime']),price,'bottom',ts)
                    if nextPriceRatio > priceratio and cnt+1 < datalen:
                        cheapHours.addRec(strTime(data[cnt+1]['DateTime']),nextprice,'afterbottom',ts+3600)
                    cheapCnt += 1

                prevprice = price
            cnt += 1
        if cheapCnt < 6:
            print("cheapcount was only", cheapCnt, "breaking")
            break
        else:
            adder -= 0.1
            cheapHours.clear("cheaprank")


def findHeatPumpExpensiveHours(data):
    global priceratio
    adder = 0.05
    now = int(time.time())

    for i in range(6):
        cnt     = 0
        price   = 0.0
        nextPriceRatio = priceratio - 0.5
        prevPriceRatio = priceratio - 0.5
        expensiveCnt = 0

        prevprice = round(float(data[0]['PriceWithTax']) * 100.0,2)
        datalen = len(data)

        for hour in data:
            ts = int(datetime.fromisoformat(hour['DateTime']).timestamp())
            if ((ts % 3600 == 0) and ts > (now - 5 * 3600)):
                price = round(float(hour['PriceWithTax']) * 100.0,2)
                if cnt < datalen-1:
                    nextprice = round(float(data[cnt+1]['PriceWithTax']) * 100.0,2)
                else:
                    nextprice = price

                if prevprice != 0:
                    if price == 0:
                        prevPriceRatio = prevprice / 0.001
                    else:
                        prevPriceRatio = prevprice / price

                if nextprice != 0:
                    if price == 0:
                        nextPriceRatio = nextprice / 0.001
                    else:
                        nextPriceRatio = nextprice / price

                # top of the price hill and it's neighbors.
                if prevprice + adder < price and nextprice + adder < price:  # this is a hilltop
                    if (prevPriceRatio > priceratio):
                        expensiveHours.addRec(strTime(data[cnt-1]['DateTime']),prevprice,'beforetop',ts-3600)
                    expensiveHours.addRec(strTime(hour['DateTime']),price,'top',ts)

                    if nextPriceRatio > priceratio and cnt+1 < datalen:
                        expensiveHours.addRec(strTime(data[cnt+1]['DateTime']),nextprice,'aftertop',ts+3600)
                    expensiveCnt += 1
                prevprice = price
            cnt += 1
        if expensiveCnt < 6:
            print("expensivecount was only", expensiveCnt, "breaking")
            break
        else:
            adder += 0.1
            expensiveHours.clear("expensiverank")


def removeDuplicates():
    if expensiveHours.count > cheapHours.count:
        for hour in cheapHours.times:
            expensiveHours.delRec(hour)

    if expensiveHours.count <= cheapHours.count:
        for hour in expensiveHours.times:
            cheapHours.delRec(hour)


def findBoostHours(data):
    stats = priceStats(data, 1, 24)
    hourCnt = 0
    cnt     = 0
    price   = 0.0
    prevprice = 0.0
    times, prices, reasons, tstamps = [], [], [], []

    boostTopic = mqtt_broker.topic_prefix + "/elprice/boosthours"

    print(datetime.utcnow(),"stats, min", stats.min, "max", stats.max, "avg", stats.avg)
    if stats.max - stats.min <= 2:
        result = {"id":"boosthours", "ts": int(time.time()), "values": [{"ts": ts, "time": t, "price": s, "reason": r} for ts, t, s, r in zip(tstamps, times, prices, reasons)]}
        client.publish(boostTopic, json.dumps(result), qos=0, retain=True)
        return False

    for hour in data:
        ts = int(datetime.fromisoformat(hour['DateTime']).timestamp())
        if ((ts % 3600 == 0) and ts > (now - 3600)):
            hourCnt += 1
            if hourCnt > 24:
                break
            price = round(float(hour['PriceWithTax']) * 100.0,2)

            # minimum is almost always acceptable
            # it cannot be the last, because we don't yet
            # know is it going to decrease more.
            if price == stats.min and hourCnt < 24:
                s = strTime(hour["DateTime"])
                times.append(s)
                reasons.append('min')
                tstamps.append(ts)
                prices.append(price)

            # climbing over average level.
            elif price > stats.avg and hourCnt > 1 and prevprice < stats.avg:
                s = strTime(data[cnt-1]['DateTime'])
                if not s in times:
                    times.append(s)
                    tstamps.append(ts)
                    reasons.append('avg')
                    prices.append(prevprice)

            #price is increasing.
            elif prevprice != 0 and (price / prevprice > 1.2):
                s = strTime(data[cnt-1]['DateTime'])
                if not s in times:
                    times.append(s)
                    tstamps.append(ts)
                    reasons.append('inc')
                    prices.append(prevprice)
            prevprice = price
        cnt += 1

    result = {"id":"boosthours", "ts": int(time.time()), "values": [{"ts": ts, "time": t, "price": s, "reason": r} for ts, t, s, r in zip(tstamps, times, prices, reasons)]}
    client.publish(boostTopic, json.dumps(result), qos=0, retain=True)
    return True

def queryCloud():

    try:
        data = requests.get(nordpool.BaseURL)

    except urllib.error.HTTPError  as e:
        ErrorInfo= e.read().decode()
        print(datetime.now(),'Error code: ', e.code, ErrorInfo)
        publishError(e.code, ErrorInfo)
        sys.exit()
    except  urllib.error.URLError as e:
        ErrorInfo= e.read().decode()
        print(datetime.now(),'Error code: ', e.code, ErrorInfo)
        publishError(e.code, ErrorInfo)
        sys.exit()
    return data



pid = os.getpid()
client = mqtt.Client("nordpool reader" + str(pid)) #create new instance
client.on_connect = on_connect
client.on_message=on_message
client.on_publish=on_publish
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.utcnow(), "Start")
client.loop_start()
client.subscribe(mqtt_broker.topic_prefix + "/heating/setup")

# wait to get setup before query.
time.sleep(1)

cnt = 0
for i in range(3):
    x = queryCloud()

    data = x.json()
    if x.status_code == 200:
        now = int(time.time())

        if (findBoostHours(data)): 
            findCheapHoursByRank(data, 4)
            findExpensiveHoursByRank(data, 20)
            findHeatPumpCheapHours(data)
            findHeatPumpExpensiveHours(data)
            removeDuplicates()
        cheapHours.publish()
        expensiveHours.publish()


        for hour in data:
            ts = int(datetime.fromisoformat(hour['DateTime']).timestamp())
            if ((ts % 3600 == 0) and ts > now):
                cnt = cnt +1
                if (cnt > 22):
                    break

                cents = round(float(hour['PriceWithTax']) * 100,2)
                centsNoTax = round(float(hour['PriceNoTax']) * 100, 2)
                strhour=datetime.fromtimestamp(ts).astimezone(pytz.UTC).strftime("%H")
                topic = mqtt_broker.topic_prefix + "/elprice/" + strhour
                day = datetime.fromtimestamp(ts).astimezone(pytz.UTC).strftime("%Y%m%d%H")

                pricestate = 'normal'
                for cheaptime in cheapHours.times:
                    if cheaptime == day:
                        pricestate = 'low'
                        break

                for cheaptime in expensiveHours.times:
                    if cheaptime == day:
                        pricestate = 'high'
                        break

                send_msg = {
                        'id': 'elprice',
                        'hour': strhour,
                        'ts': ts,
                        'day': day,
                        'pricestate': pricestate,
                        'price': cents,
                        'notax': centsNoTax
                }

                msg = json.dumps(send_msg)
                client.publish(topic, msg, qos=0, retain=True)
        break

    else:
        publishError(x.status_code, x.reason)
        time.sleep(10)

print(datetime.utcnow(),"done.")
