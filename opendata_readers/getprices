#!/usr/bin/env python

import time
from datetime import datetime
from datetime import timezone
import urllib.request
import urllib.error
import requests
import json
import os
import sys
import pytz
import paho.mqtt.client as mqtt 

sys.path.insert(1, '../config')
from setup import nordpool, mqtt_broker


def on_message(client, userdata, message):
    print(message.payload)


def logger(client, userdata, level, buff):
    print("level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        connected = True
    else:
        print("connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    client.reconnect()

def on_publish(client,userdata,result):
    pass

def publishError(recData):
    now = int(time.time())

    jsonRec = {
        "id"      :      "nordpoolerror",
        "dev"     :      "spot-hinta",
        "ts"      :      now,
        "category":      "http",
        "code"    :      recData.status_code,
        "description" :  recData.reason
    }
    topic = mqtt_broker.topic_prefix + "/elprice/error"
    try:
        client.publish(topic, json.dumps(jsonRec), qos=0, retain=True)
    except:
        print("mqtt publish of error failed")


def queryCloud():

    try:
        data = requests.get(nordpool.BaseURL)

    except urllib.error.HTTPError  as e:
        ErrorInfo= e.read().decode()
        print('Error code: ', e.code, ErrorInfo)
        sys.exit()
    except  urllib.error.URLError as e:
        ErrorInfo= e.read().decode()
        print('Error code: ', e.code,ErrorInfo)
        sys.exit()
    return data


pid = os.getpid()
client = mqtt.Client("nordpool reader" + str(pid)) #create new instance
client.on_connect = on_connect
client.on_message=on_message
client.on_publish=on_publish
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()

cnt = 0

for i in range(3):
    x = queryCloud()

    data = x.json()
    if x.status_code == 200:
        now = int(time.time())
        for hour in data:
            ts = int(datetime.fromisoformat(hour['DateTime']).timestamp())
            if (ts > (now - 3600)):
                cnt = cnt +1
                if (cnt > 24):
                    break

                cents = float(hour['PriceWithTax']) * 100
                strhour=datetime.fromtimestamp(ts).astimezone(pytz.UTC).strftime("%H")
                topic = mqtt_broker.topic_prefix + "/elprice/" + strhour

                send_msg = {
                        'id': 'elprice',
                        'hour': strhour,
                        'ts': ts,
                        'day': datetime.fromtimestamp(ts).astimezone(pytz.UTC).strftime("%Y%m%d%H"),
                        'price': cents
                }

                msg = json.dumps(send_msg)
                print(topic, msg)
                client.publish(topic, msg, qos=0, retain=True)
        break

    else:
        publishError(x)
        time.sleep(10)


print("done.")