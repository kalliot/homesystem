#!/usr/bin/env python

from datetime import datetime
import time
import json
import paho.mqtt.client as mqtt 
from queue import Queue
import sys
import glob
import os

sys.path.insert(1, '/home/pi/config')
from setup import *

simuSize = 10000
simuRemaining = simuSize

def pubSimuInfo(ver):
    simuinfo = {
        'dev' : 'simu',
        'id'  : 'info',
        'memfree': 200000,
        'idfversion': 'python',
        'progversion': ver
    }
    infotopic = mqtt_broker.topic_prefix + "/simulator/simu/info"
    client.publish(infotopic,json.dumps(simuinfo),qos=0, retain=True)


def pubSimuDevice():
    simudevmsg = {
        'dev' : 'simu',
        'id'  : 'device',
        'type': 'simulator',
        'connected': 1
    }
    infotopic = mqtt_broker.topic_prefix + "/devices/simu"
    client.publish(infotopic,json.dumps(simudevmsg),qos=0, retain=True)

    simustats = {
        'dev' : 'simu',
        'id'  : 'statistics',
        'connectctn': 1,
        'disconnectcnt' : 0,
        'sendcnt': 1,
        'sensorerrors': 0,
        'max_queued': 0,
        'ts': int(time.time()),
        'started': int(time.time()),
        'rssi': -20
    }
    statstopic = mqtt_broker.topic_prefix + "/simulator/simu/statistics"
    client.publish(statstopic,json.dumps(simustats),qos=0, retain=True)



def pubFileSize(fname):
    global simuSize

    if fname[0:4] == 'simu':
        size = simuSize
        simuRemaining = size
    else:
        try:
            size = os.path.getsize(fname)
        except:
            size = 0

    infomsg = {
        'id': 'filesize',
        'name' : fname,
        'size' : size
    }
    infotopic = mqtt_broker.topic_prefix + "/ota/filesize"
    client.publish(infotopic,json.dumps(infomsg),qos=0, retain=False)

def getFiles(name, maxdays):
    ret = []
    files = glob.glob(name)
    now = int(time.time())
    for file in files:
        status = os.stat(file)
        days = int((now - int(status.st_ctime)) / 86400)
        if days <= maxdays:
            ret.append(file)
        if days > (maxdays * 2):
            os.remove(file)
    return ret


def publishFiles(newest):
    os.chdir("/home/pi/srv/ota")
    thermostatfiles   = getFiles("thermostat*", 100)
    refrigeratorfiles = getFiles("refrigerator*", 100)
    sensorsfiles      = getFiles("sensors*",100)
    rgbfiles          = getFiles("rgb7segdisplay*",100)

    simufiles = ['simu_0.0.0.1','simu_0.0.0.2','simu_0.0.0.3']
    infomsg = {
        'id': 'binaries',
        'newest' : newest,
        'thermostat' : thermostatfiles,
        'sensors' : sensorsfiles,
        'refrigerator' : refrigeratorfiles,
        'simulator'    : simufiles,
        'rgb7segdisplay' : rgbfiles
    }
    
    infotopic = mqtt_broker.topic_prefix + "/ota/files"
    if (newest == ''):
        print(datetime.utcnow(),"Ota files may have changed, refreshing")
    else:
        print(datetime.utcnow(),"Ota files have changed, at least", newest)    
    client.publish(infotopic,json.dumps(infomsg),qos=0, retain=True)

def pubSimuDownloadStatus():
    global simuSize
    simuRemaining = 1000

    for i in range(15):
        if simuRemaining > simuSize:
            simuRemaining = 0
        statusmsg = {
            'dev': 'simu',
            'id': 'otastatus',
            'value' : simuRemaining,
            'ts' : int(time.time()),
            'err' : 'ESP_OK',
        }
        client.publish(mqtt_broker.topic_prefix + '/simulator/simu/otaupdate',json.dumps(statusmsg),qos=0, retain=False)
        if simuRemaining == 0:
            break
        simuRemaining = simuRemaining + 1000
        time.sleep(0.1)




#{"id":"getfilesize", "file":"sensors_0.0.0.12"}

def processData(indata):
    id = indata['id']

    if id == 'otafileschanged':
        publishFiles(indata['name'])
    if id == 'getfilesize':
        pubFileSize(indata['file'])
    if id == 'otaupdate':
        pubSimuDownloadStatus()
        pubSimuInfo(indata['file'][5:])


def on_message(client, userdata, message):
    msgqueue.put(message.payload)


def on_connect(client, userdata, flags, rc):
    global connected

    if (rc==0):
        connected = True
        publishFiles('')
        pubSimuDevice()
        pubSimuInfo('0.0.0.1')
    else:
        print(datetime.utcnow(),"connection failed, rc=",rc)
        connected = False


def on_disconnect(client, userdata, rc):
    print(datetime.utcnow(),"disconnected")
    if rc != 7:
        try:
            client.reconnect()
        except:
            print(datetime.utcnow(),"reconnect failed, waiting...")
            time.sleep(30)
    else:
        time.sleep(1)


def on_publish(client, userdata,result):
    pass

msgqueue = Queue(maxsize=10)


client = mqtt.Client('otawatch') 
client.on_connect = on_connect
client.on_message = on_message
client.on_publish = on_publish

client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.utcnow(), "Start")
client.loop_start()


topics = [(mqtt_broker.topic_prefix + "/ota/fileschanged",0),
          (mqtt_broker.topic_prefix +"/simulator/simu/otaupdate",0),
          (mqtt_broker.topic_prefix + "/ota/getfilesize",0)]
client.subscribe(topics)


while True:
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        msg = json.loads(data)
        processData(msg)

    except KeyboardInterrupt:
        client.disconnect()
        exit(0)

    except json.decoder.JSONDecodeError as e:
        print(datetime.utcnow(), "json:", e)
        print(datetime.utcnow(), data)

    except:
        raise
