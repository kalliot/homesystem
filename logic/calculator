#!/usr/bin/env python

from datetime import datetime
import time
import json
import os
import paho.mqtt.client as mqtt 
import sys
from queue import Queue

sys.path.insert(1, '/home/pi/config')
from setup import *

class ElProduction:
    __slots__ = ('value', 'dailyWatts', 'sampleCnt', 'ts')
    def __init__(self) -> None:
        self.value = 0
        self.dailyWatts = 0
        self.sampleCnt = 0
        self.ts = int(time.time())

    def update(self,sample : int, ts : int) -> None:
        self.value += sample
        self.ts = ts
        self.sampleCnt += 1

    def hourChanged(self) -> int:
        if self.sampleCnt != 4:
            print(datetime.utcnow(),"Warning, not all quarterhour samples received!")
        ret = int(self.value / self.sampleCnt)
        self.dailyWatts += ret
        return ret

    def reset(self, dayChanged : bool) -> None:
        self.ts = int(time.time())
        self.value = 0
        self.sampleCnt = 0

        if dayChanged:
            self.dailyWatts = 0

# Solar production is read from solis inverters daily variable
# Solis resets this when day changes and cumulates it while the
# day goes on and sun is shining. Update just compares the new
# value to previous.
class SolarProduction:
    __slots__ = ('hourlyKw', 'dailyKw', 'ts', 'prevSample')

    def __init__(self) -> None:
        self.hourlyKw = 0
        self.dailyKw = 0
        self.ts = int(time.time())
        self.prevSample = -1

    def update(self, daily : float) -> None:
        if self.prevSample != -1:
            diff = daily - self.prevSample
            if diff < 0: # solis has started a new day.
                self.reset()
                self.hourlyKw = daily
            else:
                self.hourlyKw += diff
        self.dailyKw = daily
        self.prevSample = daily

    def hourChanged(self,ts : int) -> None:
        print(datetime.utcnow(), "solis reported solar production in prev hour was", round(self.hourlyKw * 1000),"watts.")
        self.hourlyKw = 0
        self.ts = ts

    def reset(self) -> None:
        self.hourlyKw = 0
        self.ts = int(time.time())
        self.dailyKw = 0
        self.prevSample = 0


class Pricing:

    __slots__ = ('pendingPrice', 'pendingTaxFreePrice', 'price', 'taxFreePrice', 'transferprice', 'buycommission', 'sellcommission', 'oilprice', 'ts')

    def __init__(self) -> None:
        self.pendingPrice = 0
        self.pendingTaxFreePrice = 0
        self.price = -100
        self.taxFreePrice = 0
        self.transferprice = 0
        self.buycommission = 0
        self.sellcommission = 0
        self.oilprice = 0 # in euros
        self.ts = int(time.time())

    def update(self, price : float, taxfree : float, ts : int) -> None:
        self.pendingPrice = price
        self.pendingTaxFreePrice = taxfree
        if self.price == -100:
            self.price = price
            self.taxFreePrice = taxfree
        self.ts = ts

    def commitPrice(self,ts : int) -> None:
        self.ts = ts
        self.price = self.pendingPrice
        self.taxFreePrice = self.pendingTaxFreePrice

    def setup(self, transfer : float, commission : float, sellcommission : float, oilprice : float) -> None:    
        self.buycommission = commission
        self.transferprice = transfer
        self.oilprice = oilprice
        self.sellcommission = sellcommission

    def buyPrice(self) -> float:
        return self.price + self.buycommission + self.transferprice

    def sellPrice(self) -> float:
        ret = self.taxFreePrice - self.sellcommission
        if ret < 0:
            ret = 0
        return ret

    def surplusPrice(self) -> float:
        return self.buyPrice() - self.sellPrice()

    def oilPrice(self) -> float:
        return self.oilprice * 10.8 # convert to cents per kwh and consider efficiency

class Consumer:
    def __init__(self, name : str, levels : int, power : int, priceFunc : callable[[], float], isElectricity : bool=True):
        self.name = name
        self.isElectricity = isElectricity
        self.levels = levels
        self.power = power
        self.hourlyWatts = 0
        self.dailyWatts = 0
        self.hourlyCents = 0
        self.dailyCents = 0
        self.currentLevel = 0
        self.ts = int(time.time())
        self.currentPower = 0
        self.priceFunc = priceFunc

    def update(self, level : int, ts : int) -> None:
        minsaveinterval = 1200 # if level is changed, save anyways
        seconds = ts - self.ts

        if seconds < 0: # in start this may become negative
            self.currentLevel = level
            self.ts = ts
            seconds = 0
            return

        if seconds < minsaveinterval and level == self.currentLevel:
            return

        self.currentLevel = level
        self.hourlyWatts += seconds / 3600 * self.currentPower
        self.hourlyCents = self.hourlyWatts / 1000 * self.priceFunc()
        self.ts = ts
        self.currentPower = level / self.levels * self.power # in watts
        print(datetime.utcnow(),self.name, "Power is", round(self.currentPower), ". Cents for current hour, so far", round(self.hourlyCents,2), ",watts", round(self.hourlyWatts))

    def setHourlyPower(self, watts : int, ts : int) -> None:
        self.hourlyWatts = watts
        self.hourlyCents = self.hourlyWatts / 1000 * self.priceFunc()
        self.dailyCents += self.hourlyCents
        self.dailyWatts += self.hourlyWatts
        self.ts = ts

    def publishHourChange(self, ts : int) -> dict:
        typ = "el"
        if not self.isElectricity:
            typ = "oil"

        jsonRec = {
                "name"    : self.name,
                "watts"   : round(self.hourlyWatts),
                "cents"   : round(self.hourlyCents,2),
                "type"    : typ
            }
        return jsonRec

    def publishDayChange(self, ts : int) -> dict:
        typ = "el"
        if not self.isElectricity:
            typ = "oil"

        jsonRec = {
                "name"    : self.name,
                "watts"   : round(self.dailyWatts),
                "cents"   : round(self.dailyCents,2),
                "type"    : typ
            }
        return jsonRec

    def hourChanged(self,ts : int) -> None:
        seconds = ts - self.ts
        if seconds < 0:
            seconds = 0
        self.hourlyWatts += seconds / 3600 * self.currentPower
        self.hourlyCents = self.hourlyWatts / 1000 * self.priceFunc()
        self.dailyCents += self.hourlyCents
        self.dailyWatts += self.hourlyWatts
        print(datetime.utcnow(), self.name, round(self.hourlyWatts,1), "/", round(self.dailyWatts,1),"Watts. Cents tot prev hour =", round(self.hourlyCents,2), ",day", round(self.dailyCents,2))

    def reset(self, dayChanged : bool) -> None:
        if dayChanged:
            self.dailyCents = 0
            self.dailyWatts = 0
        self.hourlyCents = 0
        self.hourlyWatts = 0
        self.ts = int(time.time()) # restart hourly second counting.



class Consumers():
    __slots__ = ('items', 'solarW', 'soldW', 'creditedW', 'dailySolarW', 'dailySoldW', 'dailyCreditedW')
    
    def __init__(self, consumer : str) -> None:
        self.items = consumer
        self.solarW = 0
        self.soldW = 0
        self.creditedW = 0
        self.dailySolarW = 0
        self.dailySoldW = 0
        self.dailyCreditedW = 0

    def totals(self, solarKw : float, soldW : int, creditedW : int) -> None:
        self.solarW = round(1000 * solarKw)
        self.soldW = soldW
        self.creditedW = creditedW

        self.dailySolarW += round(1000 * solarKw)
        self.dailySoldW += soldW
        self.dailyCreditedW += creditedW

    def hourChanged(self, ts : int) -> None:
        for consumer in self.items:
            consumer.hourChanged(ts)

    def reset(self, dayChanged) -> None:
        for consumer in self.items:
            consumer.reset(dayChanged)
        if dayChanged:
            self.dailySolarW = 0
            self.dailySoldW = 0
            self.dailyCreditedW = 0

    def publishHourChange(self, ts : int) -> None:
        consumerArr = []

        for consumer in self.items:
            consumerArr.append(consumer.publishHourChange(ts))

        jsonRec = {
                "id"            : "hourlycalc",
                "ts"            : ts,
                "solarW"        : self.solarW,
                "soldW"         : self.soldW,
                "soldCents"     : round(self.soldW / 1000 * pricing.sellPrice(), 2),
                "creditedW"     : self.creditedW,
                "creditedCents" : round((self.creditedW / 1000) * pricing.buyPrice(),2),
                "consumers"     : consumerArr
            }
        topic = mqtt_broker.topic_prefix + "/calculations/hourly"
        client.publish(topic, json.dumps(jsonRec), qos=0, retain=True)


    def publishDayChange(self, ts : int) -> None:
        consumerArr = []

        for consumer in self.items:
            consumerArr.append(consumer.publishDayChange(ts))

        jsonRec = {
                "id"            : "dailycalc",
                "ts"            : ts,
                "solarW"        : self.dailySolarW,
                "soldW"         : self.dailySoldW,
                "creditedW"     : self.dailyCreditedW,
                "consumers"     : consumerArr
            }
        topic = mqtt_broker.topic_prefix + "/calculations/daily"
        client.publish(topic, json.dumps(jsonRec), qos=0, retain=True)


    def hourlyWatts(self) -> int:
        ret = 0
        for consumer in self.items:
            if consumer.isElectricity:
                ret += consumer.hourlyWatts
        return ret

    def dailyWatts(self) -> int:
        ret = 0
        for consumer in self.items:
            if consumer.isElectricity:
                ret += consumer.dailyWatts
        return ret

    def hourlyCents(self) -> float:
        ret = float(0.0)

        for consumer in self.items:
            if consumer.isElectricity:
                ret += consumer.hourlyCents
        return ret

    def dailyCents(self):
        ret = float(0.0)
        for consumer in self.items:
            if consumer.isElectricity:
                ret += consumer.dailyCents  
        return ret

pricing = Pricing()
thermostat  = Consumer("thermostat",   29,   600, pricing.buyPrice)
stockheater = Consumer("stockheat",     1,  4000, pricing.buyPrice)
solheater   = Consumer("solheat",       1,  2000, pricing.surplusPrice)
storefridge = Consumer("sfridge",       1,    80, pricing.buyPrice)
heatpump    = Consumer("heatpump",    100,  2200, pricing.buyPrice)
# burner will not be calculated to the sum of electricity consumers.
burner      = Consumer("burner",        1, 20800, pricing.oilPrice, False) # 0.6gal/h = 2.27L/h -> 0.92 * 2.27 * 10 -> 20.8kw/h
allOther    = Consumer("other",         1,     0, pricing.buyPrice)

solar       = SolarProduction()
elProduction  = ElProduction()

hourCalcPending = False

consumers = Consumers((thermostat,
                       stockheater,
                       solheater,
                       storefridge,
                       heatpump,
                       allOther,
                       burner))



def isHourChangeReady(ts : int) -> bool:
    global hourCalcPending

    seconds = int(ts % 3600)
    # we are allowed to be 10 sec before or 20 seconds after hour change.
    # this is needed, because senders clock may drift a couple of seconds.
    if seconds > 20 and seconds < (3600 - 10):
        hourCalcPending = False
        return False

    if hourCalcPending:
        hourCalcPending = False
        return True
    else:
        hourCalcPending = True
    return False


def calcHourChange(newTs : int) -> None:
    # netto is the value read from electricity meter, it can be negativi
    # or positive = production is bigger than consumption
    netto = elProduction.hourChanged() # this comes from electricity metering
    if netto > 0:
        creditedW = round(solar.hourlyKw * 1000) - netto
        otherConsumptionW = creditedW - consumers.hourlyWatts()
        otherCents = round((otherConsumptionW / 1000) * pricing.buyPrice(),2)
        allOther.setHourlyPower(otherConsumptionW, newTs)
        print(datetime.utcnow(),'All the other consumption is', round(otherConsumptionW), 'W', otherCents, 'cents')
        creditedCents = round((creditedW / 1000) * pricing.buyPrice(),2)
        print(datetime.utcnow(),'credited solar production is', creditedW, 'W', creditedCents, 'cents')
        print(datetime.utcnow(),'Sold solar production is', netto,'W,',round(pricing.sellPrice() * netto / 1000,1),'cents.')
        consumers.totals(solar.hourlyKw , netto, creditedW)
    else:
        creditedW = 0
        creditedCents = 0
        # -1 * (netto -700 + 1072)
        otherConsumptionW = round(-1 * (netto - round(solar.hourlyKw * 1000) + consumers.hourlyWatts()))

        if solar.hourlyKw != 0.0:
            creditedW = round(solar.hourlyKw * 1000)
            creditedCents = round(solar.hourlyKw * pricing.buyPrice(),2)

        consumers.totals(solar.hourlyKw , 0, creditedW)
        allOther.setHourlyPower(otherConsumptionW, newTs)
        otherCents = round((otherConsumptionW / 1000) * pricing.buyPrice(),2)
        print(datetime.utcnow(),'Credited solar production is', creditedW, 'W', creditedCents, 'cents')
        print(datetime.utcnow(),"Known consumers consumed:",round(consumers.hourlyWatts()),"price:", round(consumers.hourlyCents(),1))
        print(datetime.utcnow(),'All the other consumption is', round(otherConsumptionW), 'W', otherCents, 'cents')
    solar.hourChanged(newTs)


def isDayChanged(ts : int) -> bool:
    tm = time.localtime(ts)
    return tm.tm_hour == 0


def processData(mqttdata) -> None:
    arr = mqttdata.topic.split("/")
    indata = json.loads(mqttdata.payload)
    item = arr[1]

    # bosch heatpump
    if item == "boiler_data":
        heatpump.update(int(indata['hpcompspd']), int(time.time()))
        return

    id = indata['id']
    if id == 'heatsetup':
        print(datetime.utcnow(),"received prices",indata['eltransferprice'], indata['elprice'],"heatoil",indata['heatoilprice'])
        print(datetime.utcnow(), "buy commission",indata['elprice'],"sell commission",indata['elselcommission'])
        pricing.setup(float(indata['eltransferprice']), float(indata['elprice']), float(indata['elselcommission']), float(indata['heatoilprice']))

    elif id == 'thermostat':
        newTs = int(indata['ts'])
        thermostat.update(int(indata['value']), newTs)

    elif id == 'cooler':
        newTs = int(indata['ts'])
        storefridge.update(int(indata['value']), newTs)

    elif id == 'state':
        if indata['sensor'] == 33:
            newTs = int(indata['ts'])
            burner.update(int(indata['value']), newTs)

    # handle devices which dropped out.
    elif id == 'device' and indata['connected'] == 0:
        newTs = int(time.time()) # data does not have a timestamp
        if indata['type'] == 'thermostat':
            thermostat.update(0, newTs)

    elif id == 'solarpower':
        solar.update(indata['energy_today'])

    elif id == 'relay':
        contact = int(indata['contact'])
        newTs = int(indata['ts'])
        if contact == 0: # solar energy heating
            state = indata['state']
            level = 0
            if state:
                level = 1
            solheater.update(level, newTs) # solheater starts only when there is enough solar energy
            

        elif contact == 2: # stock electricity heating
            state = indata['state']
            level = 0
            if state:
                level = 1
            stockheater.update(level, newTs)

    elif id == 'power15min':
        newTs = int(indata['ts'])
        elProduction.update(indata['W15min'], newTs)

        if isHourChangeReady(newTs):
            print(datetime.utcnow(),"The calculations are done with buyprice", pricing.buyPrice(), "and sellprice", pricing.sellPrice())
            calcHourChange(newTs)
            consumers.hourChanged(newTs)
            if elProduction.sampleCnt > 1: # prevent publish in startup
                consumers.publishHourChange(newTs)

            if isDayChanged(newTs):
                consumers.publishDayChange(newTs)
                solar.reset()
                consumers.reset(True)
                elProduction.reset(True)
            else:
                consumers.reset(False)
                elProduction.reset(False)
            pricing.commitPrice(newTs)
            print("---------------------------------------------------------")

    # elprice/current topic changes just after the hour has been changed.
    # this triggers many calculations and printing/topic updates.
    elif id == 'elprice':
        newTs = int(indata['ts'])
        pricing.update(float(indata['price']), float(indata['notax']), newTs)

        if isHourChangeReady(newTs):
            print(datetime.utcnow(),"The calculations are done with buyprice", round(pricing.buyPrice(),2), "and sellprice", round(pricing.sellPrice(),2))
            calcHourChange(newTs)
            consumers.hourChanged(newTs)
            if elProduction.sampleCnt > 1: # prevent publish in startup
                consumers.publishHourChange(newTs)
            if isDayChanged(newTs):
                consumers.publishDayChange(newTs)
                print(datetime.utcnow(),"Total daily watts consumed:",consumers.dailyWatts(),"price:", consumers.dailyCents())
                solar.reset()
                consumers.reset(True)
                elProduction.reset(True)
            else:
                consumers.reset(False)
                elProduction.reset(False)
            pricing.commitPrice(newTs)
            print("---------------------------------------------------------")


def on_message(client, userdata, message):
    msgqueue.put(message)


def on_connect(client, userdata, flags, rc):
    global connected

    if (rc==0):
        connected = True
    else:
        print(datetime.utcnow(),"connection failed, rc=",rc)
        connected = False


def on_disconnect(client, userdata, rc):
    print(datetime.utcnow(),"disconnected")
    if rc != 7:
        try:
            client.reconnect()
        except:
            print(datetime.utcnow(),"reconnect failed, waiting...")
            time.sleep(30)
    else:
        time.sleep(1)


def on_publish(client, userdata,result):
    pass

msgqueue = Queue(maxsize=10)


client = mqtt.Client('calculator' + str(os.getpid()))
client.on_connect = on_connect
client.on_message = on_message
client.on_publish = on_publish

client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.utcnow(), "Start")
client.loop_start()



topics = [(mqtt_broker.topic_prefix + "/thermostat/+/parameters/level",0),
          (mqtt_broker.topic_prefix + "/heating/setup",0),
          (mqtt_broker.topic_prefix + "/sensors/5bcae4/parameters/state/#",0),
          (mqtt_broker.topic_prefix + "/refrigerator/fd9030/parameters/state/#",0),
          (mqtt_broker.topic_prefix + "/110782219170385/solarpower",0),
          (mqtt_broker.topic_prefix + "/relay/+/shelly1/state",0),
          (mqtt_broker.topic_prefix + "/phase/all/quarterhnet",0),
          (mqtt_broker.topic_prefix + "/devices/#",0),
          ("ems-esp/boiler_data",0),
          (mqtt_broker.topic_prefix + "/elprice/current",0)]
client.subscribe(topics)


while True:
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        processData(data)

    except KeyboardInterrupt:
        client.disconnect()
        exit(0)

    except json.decoder.JSONDecodeError as e:
        print(datetime.utcnow(), "json:", e)
        print(datetime.utcnow(), data)

    except:
        raise
