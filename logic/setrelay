#!/usr/bin/env python

import time
from datetime import datetime
from datetime import timezone
import json
import paho.mqtt.client as mqtt 
import paho.mqtt.subscribe as subscribe
from queue import Queue
import sys

#sys.path.insert(1, '/home/pi/config')
sys.path.insert(1, '../config')
from setup import *

class heater:
    def __init__(self, relay, low, high):
        self.relay = relay
        self.lowtemp = low
        self.hightemp = high
        self.state = False
        self.changed = False

currentprice = 300                             # is 3eur/kwh enough high price?
currentconsumption = 0
avgconsumption = currentconsumption
relaystate = False
elheater = 0                                   # relay index of electric boiler heater
shellynumber = 1
pricelimit = 12                                # in cents
consumptionlimit = 2100                        # put relay on in if base consumption is below this
loadincrement = 2000                           # load controlled by relay is about 2000W
                                               # if load is on and consumption is over consumptionlimit - loadincrement
                                               # then put relay off
burner = heater(3, 52, 54)
elheater = heater(0, 65, 70)

boilertempreader = "5bc674"
boilertempsensor = "28b867746008f"
boilertemp = 0.0

def setRelay(state, relay):
    global elheater, shellynumber, burner

    relaymsg = {
        'id': 'relay',
        'contact': relay,
        'state': state
    }
    setrelaytopic="home/kallio/relay/shelly" + str(shellynumber) + "/setstate"
    print(setrelaytopic,json.dumps(relaymsg))
    client.publish(setrelaytopic,json.dumps(relaymsg))
    time.sleep(1)  # send consecutive relay orders with 1 sec delay 
    


def processData(eldata):
    global currentprice, currentconsumption, boilertemp
    global relaystate, avgconsumption, pricelimit
    global consumptionlimit, loadincrement, elheater

    changed = False
    
    if not (eldata.get('id') is None):
        id = eldata['id']

        # first check nordpool price
        if id == 'elprice':
            current_date = datetime.utcnow().strftime("%Y%m%d%H") 
            if (current_date != eldata['day']):
                print(datetime.utcnow(),"current price is not valid")
            else:
                currentprice=int(eldata['price'])
        
        if id == 'heatsetup':
            print(datetime.utcnow(),"got heatsetup")
            consumptionlimit = int(eldata['consumptionlimit'])
            loadincrement = int(eldata['heaterpower'])
            pricelimit = int(eldata['pricelimit'])

        if id == "relay":
            contact = int(eldata['contact'])
            if contact == elheater:
                relaystate = eldata['state']

            if contact == burner.relay:
                print("received relay msg, setting", contact, "to", eldata['state'])
                burner.state = eldata['state']

            if contact == 1 or contact == 2:
                return    

        if (id == "elproduction" and eldata['phase'] == 'all'):
            currentconsumption = int(eldata['power'])
            avgconsumption = int(eldata['poweravg'])

        if id == "temperature" and eldata['dev'] == boilertempreader and eldata['sensor'] == boilertempsensor:
            boilertemp = float(eldata['value'])
   

        #-------------------------------------------------------------------
        # At the moment I don't have stock price agreement, so, no handling
        # of heating where price is low
        #-------------------------------------------------------------------

        # using avgconsumption, to put relay on more carelessly
    if currentprice < pricelimit:  
        if avgconsumption >= consumptionlimit:  
            if (relaystate == False):
                changed = True
                relaystate = True
        else:
            if currentconsumption < (consumptionlimit - loadincrement):
                if relaystate == True:  
                    changed = True
                    relaystate = False

    else: 
        # if price is high, dont care about consumption, just keep relay off.
        if relaystate == True:  
            changed = True
            relaystate = False

    if boilertemp != 0.0: # value is something else than initial value
        if boilertemp <= burner.lowtemp:
            if burner.state == False:
                burner.state = True
                burner.changed = True

        if boilertemp >= burner.hightemp:    
            if burner.state == True:
                burner.state = False
                burner.changed = True

    print(datetime.now(),"price=", currentprice, "avgconsumption=", avgconsumption, "boilertemp=", boilertemp, "consumption=", currentconsumption, "elstate=", relaystate, "burnerstate=", burner.state)
    if changed:
        setRelay(relaystate, elheater)
        pass

    if burner.changed == True:
        burner.changed = False
        setRelay(burner.state, burner.relay)


def on_message(client, userdata, message):
    msgqueue.put(message.payload)


def logger(client, userdata, level, buff):
    print("level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        connected = True
    else:
        print(datetime.utcnow(),"connection failed, rc=",rc)
        connected = False

def on_disconnect(client, userdata, rc):
    client.reconnect()

def on_publish(client, userdata,result):
    pass


msgqueue = Queue(maxsize=10)


client = mqtt.Client("setrelayx" + str(elheater)) #create new instance
client.on_connect = on_connect
client.on_message = on_message
client.on_publish = on_publish

client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.utcnow(), "Start")
client.loop_start()

topics = [("home/kallio/elprice/current",0),
          ("home/kallio/phase/all/elproduction",0),
          ("home/kallio/esp" + boilertempreader + "/parameters/temperature/" + boilertempsensor,0),
          ("home/kallio/relay/+/shelly" + str(shellynumber) + "/state", 0),
          ("home/kallio/heating/setup",0)]

#setRelay(False, elheater)
#setRelay(False, burner.relay)
client.subscribe(topics)

while True:
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        processData(json.loads(data))
    except KeyboardInterrupt:
        client.disconnect()
        exit(0)
    except json.decoder.JSONDecodeError as e:
        print(datetime.utcnow(), "json:", e)
        print(datetime.utcnow(), data)
    except:
        raise        
