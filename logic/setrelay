#!/usr/bin/env python

import time
import os
from datetime import datetime
from datetime import timezone
import json
import paho.mqtt.client as mqtt 
import paho.mqtt.subscribe as subscribe
from queue import Queue
import sys

sys.path.insert(1, '/home/pi/config')
from setup import *

sellprice = 300                             # is 3eur/kwh enough high price?
taxedprice = 300
currentconsumption = 0
W15min = 0
quart = 0
avgconsumption = currentconsumption
shellynumber = 1
relayonminimum = 120                           # put is on minimum seconds
burner_max_preheat = 900
elhysteresis = 200
flameburning = False
magnetvalve = "33"
boostedhours = []
hotWaterTemp = 0.0
prevHotWaterTemp = 0.0

class heatSetup:
    def __init__(self):
        self.relayonminimum  = 120                           # put is on minimum seconds
        self.eltype          = 'fixed'                       # el agreement, price is fixed c/kWh
        self.elprice         = 7.8                           # fixed: real price. stock: buy commission
        self.transferprice   = 6.5
        self.elselcommission = 0.24
        self.maxconsumption  = -6000                         # start heating of waterboiler, only if consumption is bigger than this.
        self.heatoilprice    = 1.61                          # eur/liter
        self.hotwaterboost   = 2.0                           # if hotwater temp is increasing, raise burner start temperature


hsetup = heatSetup()

class heater:
    def __init__(self, shellynumber, relay, low, hysteresis, power):
        self.shellynumber = shellynumber
        self.relay = relay
        self.lowtemp = low
        self.hysteresis = hysteresis
        self.power = power
        self.changets = int(time.time())
        self.state = False
        self.boosted = False
        self.faultstate = False

    def setState(self, newState):
        if newState == self.state:
            return

        now = int(time.time())

        relaymsg = {
            'id': 'relay',
            'contact': self.relay,
            'duration': now - self.changets,
            'state': newState
        }
        setrelaytopic = mqtt_broker.topic_prefix + "/relay/shelly" + str(self.shellynumber) + "/setstate"
        client.publish(setrelaytopic,json.dumps(relaymsg), qos=0, retain=True)
        self.changets = now
        self.state = newState
        time.sleep(3)  # send consecutive relay orders with 3 sec delay



burner   = heater(1, 3, 51.8, 0.4, 0)
elheater2kw = heater(1, 0, 73.0, 2.0, 2000)
elheater4kw = heater(1, 2, 55.0, 2.0, 4000)

boilertempreader = "5bcae4"

boilertempsensor = "746008f"
centertempsensor = "574e13c75"
hotwatertempsensor = "7360083"


boilertemp = 0.0
centertemp = 0.0


def getJsonVar(source, name, defvalue):
    try:
        ret = source[name]
    except:
        print(datetime.utcnow(), "Warning: failed to read json variable", name)
        publishError("json", 1002, "failed to read json variable:" + name)
        return defvalue

    if ret != defvalue:
        print(datetime.utcnow(), "changed", name, "from", defvalue, "to", ret)
    return ret

def getJsonNumericVar(source, name, defvalue):
    try:
        ret = float(source[name])
    except:
        print(datetime.utcnow(), "Warning: failed to read json variable", name)
        publishError("json", 1002, "failed to read json variable:" + name)
        return defvalue

    if ret != defvalue:
        print(datetime.utcnow(), "changed", name, "from", defvalue, "to", ret)
    return ret


def publishError(category, code, description):
    global shellynumber
    now = int(time.time())

    jsonRec = {
        "id"      :      "error",
        "dev"     :      "shelly" + str(shellynumber),
        "ts"      :      now,
        "category":      category,
        "code"    :      code,
        "description" :  description
    }
    topic = mqtt_broker.topic_prefix + "/error/relay/shelly" + str(shellynumber)
    try:
        client.publish(topic, json.dumps(jsonRec), qos=0, retain=True)
    except:
        print(datetime.utcnow(), "mqtt publish of error failed")

# using avgconsumption, to put relay on more carelessly
def elheaterOnByProduction(elHeater):
    global avgconsumption, relayonminimum
    global quart, boilertemp, W15min

    timeleft = 900 - quart
    remain = elHeater.power - avgconsumption
    # avoid division by zero
    if remain == 0:
        remain = 1

    result = (timeleft * remain / 3600) - W15min / 4

    if timeleft > relayonminimum and \
        result < 5 and \
        boilertemp <= elHeater.lowtemp:
        elHeater.setState(True)
    elif W15min < 0.0 or \
        boilertemp >= (elHeater.lowtemp + elHeater.hysteresis):
        elHeater.setState(False)


def elheaterOn(elHeater, max):
    global currentconsumption, avgconsumption, boilertemp, centertemp
    global elhysteresis

    if elHeater.boosted:
        limit = elHeater.lowtemp + 5 # TODO: put this boost amount to setup params.
    else:
        limit = elHeater.lowtemp

    if elHeater.state == True and boilertemp >= (limit + elHeater.hysteresis):
        elHeater.setState(False)
        return

    # note: avgconsumption and maxconsumption are negative

    if elHeater.state == False:
        if avgconsumption > max:
            if boilertemp <= limit:
                print(datetime.utcnow(),"Putting stock heater on")
                elHeater.setState(True)

    elif avgconsumption  < (max - elHeater.power - elhysteresis):
        print(datetime.utcnow(),"currentconsumption:",currentconsumption,"is less than",max - elHeater.power - elhysteresis)
        print(datetime.utcnow(),"Putting stock heater off")
        elHeater.setState(False)


def checkBoost():
    current_date = datetime.utcnow().strftime("%Y%m%d%H")

    for cd in boostedhours:
        print(datetime.utcnow(),"comparing",current_date,"==",cd)
        if current_date == cd:
            print(datetime.utcnow(),"BOOST is active")
            return True

    print(datetime.utcnow(),"BOOST is passive")
    return False


def processData(eldata):
    global taxedprice, sellprice, currentconsumption, boilertemp, centertemp
    global avgconsumption, W15min, quart, flameburning
    global relayonminimum, elheater2kw, elheater4kw, hotWaterTemp, prevHotWaterTemp

    if not (eldata.get('id') is None):
        id = eldata['id']

        if id == 'boosthours':
            current_date = datetime.utcnow().strftime("%Y%m%d%H")
            boostedhours.clear()
            for boostrec in eldata['values']:
                boostedhours.append(boostrec['time'])
                print(datetime.utcnow(),"added",boostrec['time'],"to boostedhours array")
            elheater4kw.boosted = checkBoost()

        elif id == 'elprice':
            current_date = datetime.utcnow().strftime("%Y%m%d%H")
            if (current_date != eldata['day']):
                publishError("datetime", 1001, "current prices timestamp is not valid:" + eldata['day'])
                print(datetime.utcnow(),"current prices timestamp is not valid")
            else:
                sellprice = float(eldata['notax'])
                taxedprice = float(eldata['price'])
                elheater4kw.boosted = checkBoost()
        
        elif id == 'heatsetup':
            print(datetime.utcnow(),"got heatsetup")
            burner.faultstate = False # This is the method to reset burner.faultstate. Otherwise you should restart this program.

            hsetup.relayonminimum   = getJsonNumericVar(eldata, 'relayonminimum',   hsetup.relayonminimum)
            hsetup.elselcommission  = getJsonNumericVar(eldata, 'elselcommission',  hsetup.elselcommission)
            hsetup.transferprice    = getJsonNumericVar(eldata, 'eltransferprice',  hsetup.transferprice)
            hsetup.eltype           = getJsonVar(eldata,        'eltype',           hsetup.eltype)
            hsetup.elprice          = getJsonNumericVar(eldata, 'elprice',          hsetup.elprice)
            hsetup.maxconsumption   = getJsonNumericVar(eldata, 'maxconsumption',   hsetup.maxconsumption)
            hsetup.heatoilprice     = getJsonNumericVar(eldata, 'heatoilprice',     hsetup.heatoilprice)
            hsetup.hotwaterboost    = getJsonNumericVar(eldata, 'hotwaterboost',    hsetup.hotwaterboost)

            burner.lowtemp          = getJsonNumericVar(eldata, 'burner_lowtemp',    burner.lowtemp)
            burner.hysteresis       = getJsonNumericVar(eldata, 'burner_hysteresis', burner.hysteresis)
            elheater2kw.lowtemp     = getJsonNumericVar(eldata, 'solelheater_lowtemp',  elheater2kw.lowtemp)
            elheater2kw.hysteresis  = getJsonNumericVar(eldata, 'solelheater_hysteresis',elheater2kw.hysteresis)

            elheater4kw.lowtemp     = getJsonNumericVar(eldata, 'stockelheater_lowtemp',  elheater4kw.lowtemp)
            elheater4kw.hysteresis  = getJsonNumericVar(eldata, 'stockelheater_hysteresis',elheater4kw.hysteresis)

        elif id == "relay":
            contact = int(eldata['contact'])
            # we come here atleast when somebody clics relay states from
            # the relay buttons or from the cloud.
            if contact == elheater2kw.relay:
                elheater2kw.setState(eldata['state'])

            elif contact == elheater4kw.relay:
                elheater4kw.setState(eldata['state'])

            elif contact == burner.relay:
                burner.setState(eldata['state'])

            elif contact == 1: # contact 1 is not handled in this program
                return    
            print(datetime.utcnow(), "received relay msg, setting", contact, "to", eldata['state'])

        elif id == "elproduction" and \
              eldata['phase'] == 'all':
            currentconsumption = int(eldata['power'])
            avgconsumption = int(eldata['poweravg'])
            W15min = float(eldata['W15min'])
            quart  = int(eldata['seconds'])

        elif id == "temperature":
            if  eldata['sensor'] == boilertempsensor:
                boilertemp = float(eldata['value'])
            elif eldata['sensor'] == centertempsensor:
                centertemp = float(eldata['value'])
            elif eldata['sensor'] == hotwatertempsensor:
                now = time.time()
                hotWaterTemp = float(eldata['value'])
                if prevHotWaterTemp != 0.0:
                    if ((hotWaterTemp - prevHotWaterTemp) > 0.4) and (burner.state == False): # don't turn on boost, if burner is already runnning
                        burner.boosted = True
                    elif ((hotWaterTemp - prevHotWaterTemp) < 0.0) and ((now - burner.changets) > 600):
                        burner.boosted = False
                prevHotWaterTemp = hotWaterTemp

        elif id == "state":
            now = time.time()
            flameburning = (eldata['value'] == 1)
            if flameburning == True:
                if burner.state == True:
                    diff = int(now - burner.changets)
                    print(datetime.utcnow(),"burner preheat took", diff, "seconds.")
                    if burner.faultstate == True:
                        print(datetime.utcnow(),"burner faultstate cancelled.")
                        burner.faultstate = False
            else:
                if burner.state == False:
                    print(datetime.utcnow(),"burner stopped successfully")
                else:
                    diff = int(now - burner.changets)
                    burner.faultstate = True
                    publishError("burner", 3000, "burner stopped too early, only " + str(int(diff)) + " seconds since preheat started.")
                    print(datetime.utcnow(),"burner stopped too early")

    if boilertemp != 0.0 and centertemp != 0.0:  # value is something else than initial value
        if burner.faultstate == True:
            print(datetime.utcnow(),"BURNERFAULT is on, now running by only electric heater")
            elheaterOn(elheater4kw, hsetup.maxconsumption)
        else:
            if hsetup.eltype == 'fixed':
                elheater4kw.setState(False)
                if (sellprice - hsetup.elselcommission) < (hsetup.elprice + hsetup.transferprice):
                    elheaterOnByProduction(elheater2kw)
                else:
                    # if price is high, dont care about consumption, just keep relay off.
                    elheater2kw.setState(False)

            if hsetup.eltype == 'stock':
                if (hsetup.heatoilprice * 10.8) > (sellprice - hsetup.elselcommission): # Sellprice should be compared to heating with oil
                    elheaterOnByProduction(elheater2kw)
                else:
                    elheater2kw.setState(False)

                # next, heating with low electricity stock price
                nettoprice = round(taxedprice + hsetup.elprice + hsetup.transferprice,2)
                if elheater2kw.state == False and (hsetup.heatoilprice * 10.8) > nettoprice:
                    elheaterOn(elheater4kw, hsetup.maxconsumption)
                else:
                    elheater4kw.setState(False)


            # in case boiler temp drops too low, put the burner on anyway.
            starttemp = burner.lowtemp
            if burner.boosted:
                starttemp += hsetup.hotwaterboost
            if centertemp <= starttemp:
                burner.setState(True)
            else:
                stoptemp = burner.lowtemp + burner.hysteresis
                if burner.boosted:
                    stoptemp += hsetup.hotwaterboost
                if centertemp >= stoptemp:
                    burner.setState(False)

    print(datetime.utcnow(),"sellprice:", sellprice - hsetup.elselcommission, end=", ")
    print("consumption:", currentconsumption, end=", ")
    print("avgconsumption:", avgconsumption, end=", ")
    print("boilertemp:", boilertemp, end=", ")
    print("centertemp:", centertemp, end=", ")
    print("elstate2kw:", elheater2kw.state, end=", ")
    print("elstate4kw:", elheater4kw.state, end=", ")
    print("burnerstate:", burner.state)


def on_message(client, userdata, message):
    msgqueue.put(message.payload)


def logger(client, userdata, level, buff):
    print("level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global shellynumber, boilertempreader, magnetvalve
    global mqtt_broker

    if (rc==0):
        topics = [
                (mqtt_broker.topic_prefix + "/relay/+/shelly" + str(shellynumber) + "/state", 0),
                (mqtt_broker.topic_prefix + "/heating/setup",0),
                (mqtt_broker.topic_prefix + "/elprice/current",0),
                (mqtt_broker.topic_prefix + "/elprice/boosthours",0),
                (mqtt_broker.topic_prefix + "/phase/all/elproduction",0),
                (mqtt_broker.topic_prefix + "/sensors/" + boilertempreader + "/parameters/state/" + magnetvalve,0),
                (mqtt_broker.topic_prefix + "/sensors/" + boilertempreader + "/parameters/temperature/#",0)
        ]
        client.subscribe(topics)

    else:
        print(datetime.utcnow(),"connection failed, rc=",rc)


def on_disconnect(client, userdata, rc):
    print(datetime.utcnow(),"disconnected, rc=", rc)


def on_publish(client, userdata,result):
    pass


msgqueue = Queue(maxsize=15)


client = mqtt.Client("setrelay" + str(elheater2kw.relay) + ":" + str(burner.relay) + str(os.getpid())) #create new instance
client.on_connect = on_connect
client.on_message = on_message
client.on_publish = on_publish

client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.utcnow(), "Start")
client.loop_start()

while True:
    now = time.time()
    diff = int(now - burner.changets)
    if burner.state == True and flameburning == False and diff > burner_max_preheat and centertemp < burner.lowtemp:
        if burner.faultstate == False:
            publishError("burner", 3001, "Burner fault or magnetvalve sensor fault. Preheat started " + str(diff) + " seconds ago.")
            print(datetime.utcnow(),"oil burner has not started")
        burner.faultstate = True

    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        processData(json.loads(data))
    except KeyboardInterrupt:
        client.disconnect()
        exit(0)

    except json.decoder.JSONDecodeError as e:
        print(datetime.utcnow(), "json:", e)
        print(datetime.utcnow(), data)
    except:
        raise        

    sys.stdout.flush()
