#!/usr/bin/env python


from datetime import datetime
import paho.mqtt.client as mqtt 
import os
import time
import json
import sys
from queue import Queue, Empty


sys.path.insert(1, '/home/pi/config')
from setup import *

desiredroomtemp = 21.5
desiredfloortemp = 21.5
heatpump_min_temp = -17
heatpump_restore_temp = -13
outtemp = 0.0
auxonly = False
auxchanged = 0
hitemphours = []
lotemphours = []
taxedprice = 0.0
lastemsdata = time.time()

class cop_calculator:
    def __init__(self):
        # temperatures in kelvin. This is easier, since they are never negative.
        self.temps = [243.0, 253.0, 263.0, 273.0, 283.0, 293.0] # -30C, -20C, -10C, 0C, 10C, 20C
        self.cops =  [  1.0,   1.3,  1.75,   2.8,   3.5,   4.3]

    def get(self, currtemp):
        retcop = 3.0
        factor = 0.0

        currtemp += 273 # convert to kelvins
        if currtemp < self.temps[0]: # very rare situation, where outsid temperature is below -30C
            currtemp = self.temps[0] + 1

        #interpolate cop from outside temperature
        for i in range(len(self.temps)):
            if self.temps[i] > currtemp:
                starttemp = self.temps[i-1] 
                stoptemp  = self.temps[i]   
                startcop = self.cops[i-1]   
                if (starttemp == currtemp):
                    retcop = startcop
                else:
                    stopcop = self.cops[i]      
                    tempdiff = stoptemp - starttemp  
                    copdiff = stopcop - startcop     
                    factor = (currtemp - starttemp) / tempdiff
                    retcop = round(factor * copdiff + startcop,2)
                break

        return retcop


class temperature:
    def __init__(self, topic):
        self.topic = topic
        self.changed = 0
        self.value = 0

    def set(self, val):
        if self.value != val:
            self.value = val
            return True
        return False

    def change(self, newval):

        if newval == self.value:
            return

        if client.is_connected() == False:
            print(datetime.utcnow(),"not publishing change request, we are not connected.")
            return

        now = int(time.time())
        diff = now - self.changed
        if diff < 1800:
            print(datetime.utcnow(),"prev change in topic",self.topic,"is too fresh,",diff, "not changing")
            return

        print(datetime.utcnow(),self.topic, newval)    

        client.publish(self.topic, newval, qos=0, retain=True)
        time.sleep(1)  # send consecutive relay orders with 1 sec delay
        self.changed = now 


class heatSetup:
    def __init__(self):
        self.eltype          = 'fixed'                       # el agreement, price is fixed c/kWh
        self.elprice         = 7.8                           # fixed: real price. stock: buy commission
        self.transferprice   = 6.5
        self.heatoilprice    = 1.61                          # eur/liter
        self.lowroom         = 19
        self.normroom        = 21.5
        self.hiroom          = 23
        self.lowfloor        = 19
        self.normfloor       = 21.5
        self.hifloor         = 23


hsetup = heatSetup()
floortemp = temperature('ems-esp/thermostat/hc2/seltemp')
roomtemp = temperature('ems-esp/thermostat/seltemp')
cop = cop_calculator()


def checkHiTemp():
    current_date = datetime.utcnow().strftime("%Y%m%d%H")

    for cd in hitemphours:
        print(datetime.utcnow(),"comparing",current_date,"==",cd)
        if current_date == cd:
            print(datetime.utcnow(),"HiTemp is active")
            return True

    print(datetime.utcnow(),"HiTemp is passive")
    return False


def checkLoTemp():
    current_date = datetime.utcnow().strftime("%Y%m%d%H")

    for cd in lotemphours:
        print(datetime.utcnow(),"comparing",current_date,"==",cd)
        if current_date == cd:
            print(datetime.utcnow(),"LoTemp is active")
            return True

    print(datetime.utcnow(),"LoTemp is passive")
    return False


def publishError(category, code, description):

    if client.is_connected() == False:
        print(datetime.utcnow(),"not publishing errir message, we are not connected.")
        return

    now = int(time.time())

    jsonRec = {
        "id"      :      "error",
        "dev"     :      "heatpump",
        "ts"      :      now,
        "category":      category,
        "code"    :      code,
        "description" :  description
    }
    topic = mqtt_broker.topic_prefix + "/error/heatpump"
    try:
        client.publish(topic, json.dumps(jsonRec), qos=0, retain=True)
    except:
        print(datetime.utcnow(), "mqtt publish of error failed")


def getJsonVar(source, name, defvalue):
    try:
        ret = source[name]
    except:
        print(datetime.utcnow(), "Warning: failed to read json variable", name)
        publishError("json", 1002, "failed to read json variable:" + name)
        return defvalue

    if ret != defvalue:
        print(datetime.utcnow(), "changed", name, "from", defvalue, "to", ret)
    return ret


def getJsonNumericVar(source, name, defvalue):
    try:
        ret = float(source[name])
    except:
        print(datetime.utcnow(), "Warning: failed to read json variable", name)
        publishError("json", 1002, "failed to read json variable:" + name)
        return defvalue

    if ret != defvalue:
        print(datetime.utcnow(), "changed", name, "from", defvalue, "to", ret)
    return ret


def setAuxHeater(state):
    global auxonly, auxchanged

    if auxonly == state:
        return False

    if client.is_connected() == False:
        print(datetime.utcnow(),"not publishing aux heater request, we are not connected.")
        return

    now = time.time()
    diff = now - auxchanged
    if diff < 1800:
        print(datetime.utcnow(),"Auxonly change is too fresh:", diff)
        return
    topic = "ems-esp/boiler/auxheateronly"
    client.publish(topic,state, qos=0, retain=True)
    print(datetime.utcnow(),"changed auxonly to state:", state)
    time.sleep(1)
    return True


def parseEmsTopics(topic, data):
    global auxonly, outtemp, auxchanged, lastemsdata

    if (topic == "boiler_data"):
        lastemsdata = time.time()
        auxstate = getJsonVar(data,'auxheateronly',auxonly)
        if auxstate != auxonly:
            auxchanged = time.time()
            auxonly = auxstate
            desiredTemperatures()

        outtemp = getJsonNumericVar(data, 'outdoortemp', outtemp)
        # this is received so often, that further processing is not needed.
        return False

    elif topic == "thermostat_data":
        lastemsdata = time.time()
        if not (data.get('hc1') is None):
            hc1data = data['hc1']
            roomtemp.set(round(getJsonNumericVar(hc1data,'seltemp',roomtemp.value),2))

        if not (data.get('hc2') is None):
            hc2data =data['hc2']
            floortemp.set(round(getJsonNumericVar(hc2data,'seltemp',floortemp.value),2))
        return True

    else:
        print(datetime.utcnow(),"topic", topic, "not handled")

    return False

def desiredTemperatures():
    global desiredroomtemp, desiredfloortemp, auxonly

    if auxonly == False:
        if checkHiTemp():
            desiredroomtemp   = hsetup.hiroom
            desiredfloortemp  = hsetup.hifloor
            return
        elif checkLoTemp(): # lo and hi temp may be conflicting, here hi has bigger priority.
            desiredroomtemp   = hsetup.lowroom
            desiredfloortemp  = hsetup.lowfloor
            return

    desiredroomtemp   = hsetup.normroom
    desiredfloortemp  = hsetup.normfloor


def parseHomeTopics(data):
    global desiredroomtemp, desiredfloortemp, auxonly
    global taxedprice, outtemp

    id = data['id']

    if id == 'awhightemp': # got high temperature schedule
        print(datetime.utcnow(),"got high temp hours")
        hitemphours.clear()
        for hitemprec in data['values']:
            hitemphours.append(hitemprec['time'])
            print(datetime.utcnow(),"added",hitemprec['time'],"to hightemp array")
        desiredTemperatures()


    if id == 'awlowtemp': # got low temperature schedule
        print(datetime.utcnow(),"got low temp hours")
        lotemphours.clear()
        for lotemprec in data['values']:
            lotemphours.append(lotemprec['time'])
            print(datetime.utcnow(),"added",lotemprec['time'],"to low array")
        desiredTemperatures()


    elif id == 'heatpumpsetup':
        print(datetime.utcnow(),"got heatpumpsetup")
        hsetup.lowroom     = getJsonNumericVar(data, 'lowroomtemp',  hsetup.lowroom)
        hsetup.normroom    = getJsonNumericVar(data, 'normroomtemp', hsetup.normroom)
        hsetup.hiroom      = getJsonNumericVar(data, 'hiroomtemp',   hsetup.hiroom)
        hsetup.lowfloor     = getJsonNumericVar(data, 'lowfloortemp',  hsetup.lowfloor)
        hsetup.normfloor    = getJsonNumericVar(data, 'normfloortemp', hsetup.normfloor)
        hsetup.hifloor      = getJsonNumericVar(data, 'hifloortemp',   hsetup.hifloor)

    elif id == 'heatsetup':
        print(datetime.utcnow(),"got heatsetup")
        hsetup.transferprice    = getJsonNumericVar(data, 'eltransferprice',  hsetup.transferprice)
        hsetup.eltype           = getJsonVar(data,        'eltype',           hsetup.eltype)
        hsetup.elprice          = getJsonNumericVar(data, 'elprice',          hsetup.elprice)
        hsetup.heatoilprice     = getJsonNumericVar(data, 'heatoilprice',     hsetup.heatoilprice)

    elif id == 'elprice':
        print(datetime.utcnow(),"got elprice")
        current_date = datetime.utcnow().strftime("%Y%m%d%H")
        if (current_date != data['day']):
            publishError("datetime", 1001, "current prices timestamp is not valid:" + data['day'])
            print(datetime.utcnow(),"current prices timestamp is not valid")
        else:
            taxedprice = round(getJsonNumericVar(data, 'price', taxedprice))
        desiredTemperatures()


def tuneCompressor():
    global taxedprice, outtemp, desiredfloortemp, desiredroomtemp
    ret = False

    if roomtemp.value == 0:
        return False # in init state.

    if outtemp < heatpump_min_temp:
        setAuxHeater(True)
        return True

    if hsetup.eltype == 'stock':
        compressorHysteresis = 0.5
        nettoprice = round(taxedprice + hsetup.elprice + hsetup.transferprice, 2)
        burnerprice = round(hsetup.heatoilprice * 10.8, 2) # changing Euros/litre to cents/kW. Multiplier is 10.8 instead of 10, because efficiency is about 92%
        compressorOffPrice = round(nettoprice / cop.get(outtemp),2)
        compressorOnPrice = round(nettoprice / cop.get(outtemp + compressorHysteresis),2)
        if burnerprice < compressorOffPrice:
            if setAuxHeater(True):
                print(datetime.utcnow(), "Burner price is now enough low:",burnerprice, "compared to compressor price",compressorOffPrice,". We just burn heatoil.")
                ret = True
        else:
            if (burnerprice > compressorOnPrice) and (outtemp > heatpump_restore_temp):
                if setAuxHeater(False):
                    print(datetime.utcnow(), "Burner price:",burnerprice,"is higher than compressor:",compressorOnPrice,". We use aw compressor")
                    ret = True
            else:
                print(datetime.utcnow(),"Now waiting burnerprice > compressorOnPrice.", burnerprice,">",compressorOnPrice)

    if roomtemp.value != desiredroomtemp:
        roomtemp.change(desiredroomtemp)
        ret = True

    if floortemp.value != desiredfloortemp:
        floortemp.change(desiredfloortemp)
        ret = True

    return ret


def handleTopics(recData):
    global desiredroomtemp, desiredfloortemp, auxonly
    global taxedprice, outtemp

    tune = True
    arr = recData.topic.split("/")
    item = arr[1]

    try:
        data = json.loads(recData.payload)

    except json.decoder.JSONDecodeError as e:
        publishError("json", 1003, "json parse error:" + e)
        print(datetime.utcnow(), "json:", e)
        return

    except:
        raise

    hometopic = mqtt_broker.topic_prefix.split("/")

    if item == hometopic[1]:
        parseHomeTopics(data)
    else:
        tune = parseEmsTopics(item, data)

    if tune and tuneCompressor():
        print(datetime.utcnow(),"auxonly=",auxonly,end=", ")
        print("out temp=",outtemp, end=", ")
        print("currentroom=",roomtemp.value,end=", ")
        print("desiredroomtemp=",desiredroomtemp,end=", ")
        print("currentfloor=",floortemp.value,end=", ")
        print("desiredfloortemp=", desiredfloortemp)



def on_message(client, userdata, message):
    msgqueue.put(message)


def on_connect(client, userdata, flags, rc):
    if (rc==0):
        topics = [
            (mqtt_broker.topic_prefix + "/+/setup",     0),
            (mqtt_broker.topic_prefix + "/elprice/awhightemp",0),
            (mqtt_broker.topic_prefix + "/elprice/awlowtemp", 0),
            (mqtt_broker.topic_prefix + "/elprice/current",   0),
            ("ems-esp/boiler_data",                           0),
            ("ems-esp/thermostat_data",                       0)
        ]
        client.subscribe(topics)
    else:
        print("connection failed, rc=",rc)            


def on_disconnect(client, userdata, rc):
    if rc!=7:
        try:
            client.reconnect()
        except:
            print(datetime.utcnow(),"reconnect failed, waiting...")
            time.sleep(30)
        
    else:
        time.sleep(30)


msgqueue = Queue(maxsize=25)    
pid = os.getpid()


client = mqtt.Client("heatpump:" + str(pid))
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port=mqtt_broker.port, keepalive=60)
print(datetime.utcnow(), "Start")
client.loop_start()



while (True):
    now = time.time()
    diff = now - lastemsdata
    if diff > 300:
        print(datetime.utcnow(), "ems-esp problem!")
        publishError("ems-esp", 2000, "It is too long since got ems-esp message." + diff + "seconds.")

    try:
        data = msgqueue.get(block=True, timeout=60)
        if data is None:
            continue
        handleTopics(data)
        sys.stdout.flush()

    except Empty:
        print(datetime.utcnow(), "Timeout")

    except KeyboardInterrupt:
        client.disconnect()
        client.loop_stop()
        exit(0)

    except:
        raise

