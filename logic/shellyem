#!/usr/bin/env python

import json
import paho.mqtt.client as mqtt 
from queue import Queue, Empty
from datetime import datetime
import time
import sys

sys.path.insert(1, '/home/pi/config')
from setup import *


class phase:
    def __init__(self, phase):
        self.phase = phase
        self.power = 0.0
        self.current = 0.0
        self.voltage = 0.0
        self.total = 0.0
        self.pf = 0.0
        self.count = 0

phases = [phase(0),
          phase(1),
          phase(2)]

all_power_avg = []
prevpower = 0
W15min = 0
prevseconds = 901
publish_interval = 15

def calcAvg():
    pcount = 0
    sum = 0
    for item in all_power_avg:
        pcount = pcount + 1
        sum += item
    return sum / pcount


def resetPhase(phase):
    phase.power = 0.0
    phase.power = 0.0
    phase.current = 0.0
    phase.voltage = 0.0
    phase.total = 0.0
    phase.pf = 0.0
    phase.count = 0


def publishPhase(phase):
    if phase.count == 0:
        return
    now = int(time.time())
    measurement = {
        'id': 'elproduction',
        'phase' : phase.phase,
        'power': round(phase.power / phase.count,2),
        'current': round(phase.current / phase.count,2),
        'voltage': round(phase.voltage  / phase.count,2),
        'pf': round(phase.pf  / phase.count,2),
        'total': round(phase.total  / phase.count,2),
        'ts': now
    }
    client.publish(mqtt_broker.topic_prefix + "/phase/" + str(phase.phase) + "/elproduction",json.dumps(measurement), qos=0, retain=True)
    resetPhase(phase)

def qnow(now):
    divi = int(now / 900)
    quart = divi * 900
    return now - quart


def getPower():
    power = 0
    for i in range(3):
        if phases[i].count and phases[i].power:
            power += phases[i].power / phases[i].count
    return power


def publishSum():
    global prevpower, W15min, prevseconds

    power = getPower()
    now = int(time.time())

    seconds = qnow(now)
    if (seconds < prevseconds):
        qtotals = {
            'id': 'power15min',
            'phase': 'all',
            'W15min': round(W15min, 2),
            'seconds' : prevseconds,
            'ts': now
        }
        client.publish(mqtt_broker.topic_prefix + "/phase/all/quarterhnet",json.dumps(qtotals), qos=0, retain=True)
        W15min = 0

    prevseconds = seconds

    if power == 0:
        power = prevpower

    W15min += power / 240
    all_power_avg.append(power)

    if len(all_power_avg) > 8: # collect samples from 8 quarts = 2 minutes
        all_power_avg.pop(0)

    totals = {
        'id': 'elproduction',
        'phase': 'all',
        'power': round(power, 2),
        'poweravg': round(calcAvg(),2),
        'seconds'  : seconds,
        'W15min' : round(W15min,2),
        'ts': now
    }

    prevpower = power
    client.publish(mqtt_broker.topic_prefix + "/phase/all/elproduction",json.dumps(totals), qos=0, retain=True)


def processData(eldata):
    global phases
    arr = eldata.topic.split("/")
    item = arr[4]
    
    phase = int(arr[3])
    if item == "power":
        phases[phase].power += float(eldata.payload)
        phases[phase].count = phases[phase].count + 1

    elif item == "current":
        phases[phase].current += float(eldata.payload)

    elif item == "voltage":
        phases[phase].voltage += float(eldata.payload)

    elif item == "total":
        phases[phase].total += float(eldata.payload)

    elif item == "pf":
        phases[phase].pf += float(eldata.payload)

    elif item == "total_returned" and phase == 2:
        return True

    elif item == "returned_energy" and phase == 2:
        return True

    return False

def on_message(client, userdata, message):
    msgqueue.put(message)


def logger(client, userdata, level, buff):
    print("level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        connected = True
    else:
        print(datetime.utcnow(),"connection failed, rc=",rc)
        connected = False


def on_disconnect(client, userdata, rc):
    client.reconnect()


def on_publish(client, userdata,result):
    pass


msgqueue = Queue(maxsize=30)
client = mqtt.Client("shelly_em_q")
client.on_connect = on_connect
client.on_message = on_message
client.on_publish = on_publish

client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.utcnow(), "Start")
client.loop_start()
client.subscribe("shellies/shelly_em/emeter/#")

prevStatisticsTS = int(time.time()) - (publish_interval - 3)
waitTime = publish_interval
publishAllowed = False

while True:
    now = int(time.time())
    elapsed = now - prevStatisticsTS
    if publishAllowed and elapsed >= publish_interval:
        waitTime = publish_interval
        prevStatisticsTS = now
        publishSum()
        publishPhase(phases[0])
        publishPhase(phases[1])
        publishPhase(phases[2])
        
    else:
        waitTime = publish_interval - elapsed
        if waitTime <= 0:
            waitTime = 1

    try:
        data = msgqueue.get(block=True, timeout=waitTime)
        if data is None:
            continue
        publishAllowed = processData(data)

    except Empty:
        pass

    except KeyboardInterrupt:
        client.disconnect()
        exit(0)
    except:
        raise        
