#!/usr/bin/env python

from datetime import datetime
import json
import paho.mqtt.client as mqtt 
from queue import Queue
import sys

sys.path.insert(1, '../config')
from influx_credentials import *

shellynumber = 1

class relay:
    def __init__(self, index, state, ts, energy):
        self.index = index
        self.state = state
        self.ts = ts
        self.initdone = False
        self.energy = energy
        self.voltage = 0
        self.temperature = 0
        self.current = 0

#relays = []
relays = [relay(0, False, 0, 0.0),
          relay(1, False, 0, 0.0),
          relay(2, False, 0, 0.0),
          relay(3, False, 0, 0.0)]

# mosquitto_pub -h 192.168.101.231 -t 'shelly1/rpc' -m '{ "id":"status", "src": "shelly2/events","method":"Switch.GetStatus","params": { "id": 0 }}'
def queryStatus(num):
    global shellynumber
    relaymsg = {
        'id': 'status',
        'src': 'shelly' + str(shellynumber) + '/events',
        'method' : 'Switch.GetStatus',
        'params': {
                'id':num
            }
    }
    setrelaytopic="shelly" +str(shellynumber) +"/rpc"
    client.publish(setrelaytopic,json.dumps(relaymsg))



def publishRelay(num, state):
    global shellynumber
    relaymsg = {
        'id': 'relay',
        'device' : 'shelly' + str(shellynumber),
        'contact': num,
        'state': state
    }
    setrelaytopic="home/kallio/relay/" +str(num) +"/shelly"+ str(shellynumber) + "/state"
    client.publish(setrelaytopic,json.dumps(relaymsg),qos=0, retain=True)

def setRelay(num, state):
    global shellynumber

    relaymsg = {
        'id': 20,
        'src':'home/kallio/relayreply',
        'method':'Switch.Set',
        'params': {
                'id':num,
                'on':state
            }
    }
    setrelaytopic="shelly" + str(shellynumber) + "/rpc"
    client.publish(setrelaytopic,json.dumps(relaymsg))


def processData(eldata):
    global relays

    if not (eldata.get('id') is None):
        if (eldata['id'] == 'relay'):
            contact = eldata['contact']
            newstate = eldata['state']
            if relays[contact].state != newstate or relays[contact].initdone == False:
                relays[contact].initdone = True
                setRelay(contact, newstate)

     #{"id":"status","src":"shellypro4pm-30c6f784e78c","dst":"shelly1/events","result":{
     #  "id":0, "source":"UI", "output":true, "apower":0.0, "voltage":237.1, "current":0.000, "pf":0.00, "aenergy":{
     #      "total":0.000,"by_minute":[0.000,0.000,0.000],"minute_ts":1676038428},"temperature":{
     #            "tC":44.2, "tF":111.6}}}

        if (eldata['id'] == 'status'):
            result = eldata['result']
            index = int(result['id'])
            relays[index].state = result['output']
            relays[index].voltage = float(result['voltage'])
            relays[index].current = float(result['current'])
            temperatures = result['temperature']
            relays[index].temperature = float(temperatures['tC'])
            print(datetime.now(),"relay",index,"state",result['output'], "volt", relays[index].voltage, "temp",relays[index].temperature, "amps",relays[index].current)
            publishRelay(index, result['output'])

    if not (eldata.get('method') is None):
        method = eldata['method']
        if method == 'NotifyStatus':
            params = eldata['params']
            ts = int(params['ts'])
            i=0
            while i < 4:
                swname = 'switch:' + str(i)
                if not (params.get(swname) is None):
                    relaydata =  params[swname]
                    if not (relaydata.get('output') is None):
                        state = relaydata['output']
                        if state != relays[i].state or relays[i].initdone == False:
                            print(datetime.now(),i,"changed")
                            relays[i].initdone = True
                            relays[i].index = i
                            relays[i].state = state
                            relays[i].ts = ts
                            publishRelay(i, state)    
                    if not (relaydata.get('aenergy') is None):   
                        energy = relaydata['aenergy']      
                        relays[i].energy = float(energy['total'])
                        relays[i].ts = int(energy['minute_ts'])
                i = i + 1    


def on_message(client, userdata, message):
    msgqueue.put(message.payload)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        connected = True
    else:
        print(datetime.now(),"connection failed, rc=",rc)
        connected = False

def on_disconnect(client, userdata, rc):
    client.reconnect()

def on_publish(client, userdata,result):
    pass


msgqueue = Queue(maxsize=10)


client = mqtt.Client("shelly" + str(shellynumber)) 
client.on_connect = on_connect
client.on_message = on_message
client.on_publish = on_publish

client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60) 
print(datetime.utcnow(), "Start")
client.loop_start()


topics = [("home/kallio/relay/shelly" + str(shellynumber) + "/setstate",0),
          ("shelly1/events/rpc",0)]
client.subscribe(topics)

queryStatus(0)
queryStatus(1)
queryStatus(2)
queryStatus(3)

while True:
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        processData(json.loads(data))
    except KeyboardInterrupt:
        client.disconnect()
        exit(0)
    except:
        raise        