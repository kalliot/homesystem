#!/usr/bin/env python


import os
import json
import time
from datetime import datetime
from queue import Queue, Empty
import sys
import paho.mqtt.client as mqtt 

rundir = "/home/pi/"
setupfile = "heatsetup.json"

sys.path.insert(1, rundir + "config")
from setup import *

lastRead = 0
devices =  []


class sensorset:
    def __init__(self, sensortype):
        self.sensortype = sensortype
        self.collection = []   # collection of similar sensors

    def addSensor(self, sensor):
        self.collection.append(sensor)

    def clean(self, basetopic):
        while self.collection:
            sensor = self.collection.pop(0)
            print(datetime.utcnow(), "removing", basetopic + self.sensortype + '/' + sensor)
            client.publish(basetopic + self.sensortype + '/' + sensor, None, qos=0, retain=True)

class device:
    def __init__(self, devtype, id):
        self.devtype = devtype
        self.id = id
        self.sensorsets = []

    def addSensor(self, sensortype, sensorid):
        sset = sensorset(sensortype)
        sset.addSensor(sensorid)
        self.sensorsets.append(sset)

    def cleanSensors(self, devtype):
        basetopic = mqtt_broker.topic_prefix + '/' + devtype + '/' + self.id + '/parameters/'
        while self.sensorsets:
            sset = self.sensorsets.pop(0)
            sset.clean(basetopic)


def processData(msg):
    global lastRead, devices

    data = json.loads(msg.payload)
    id = data['id']
    if id == "heatsetup":
        now = int(time.time())
        if now - lastRead < 2:
            print(datetime.utcnow(),"don't write, setup was just refreshed from disk")    
            return
        print(datetime.utcnow(),"got heatsetup, writing it to disk")
        f = open(rundir + setupfile,"w")
        f.write(json.dumps(data))
        f.close()

    elif id == "device":
        connected = int(data['connected'])
        if connected == 0:
            print(datetime.utcnow(),"found disconnected device", data['dev'])
            cleanqueue.put(msg)
        elif not cleanqueue.empty():
            print(datetime.utcnow(),data['dev'], "come alive clearing the cleanqueue")
            cleanqueue.queue.clear()

    elif id == "tempsensors":
        print(datetime.utcnow(),"storing tempsensors of device", data['dev'])
        dev = device('temperature', data['dev'])
        for name in data['names']:
            print(datetime.utcnow(), 'adding sensor addr', name['addr'])
            dev.addSensor('temperature',name['addr'])
        devices.append(dev)


def clean_topics(msg):
    data = json.loads(msg.payload)
    print(datetime.utcnow(),"Cleaning", data['type'],"device", data['dev'])
    client.publish(msg.topic, None, qos=0, retain=True)
    devtype = data['type'];
    basetopic = mqtt_broker.topic_prefix + '/' + devtype + '/' + data['dev']

    client.publish(basetopic + '/setup', None, qos=0, retain=True)
    client.publish(basetopic + '/info', None, qos=0, retain=True)
    client.publish(basetopic + '/statistics', None, qos=0, retain=True)
    client.publish(basetopic + '/tempsensors', None, qos=0, retain=True)

    i = 0
    while i < len(devices):
        if devices[i].id == data['dev']:
            devices[i].cleanSensors('thermostat')
            item = devices.pop(i)
            print(datetime.utcnow(), "removed",item.id,"from the list")
            break
        i += 1

    if devtype == 'rgb7segdisplay':
        client.publish(basetopic + '/colors', None, qos=0, retain=True)
        client.publish(basetopic + '/sensorsetup', None, qos=0, retain=True)

    elif devtype == 'thermostat':
        client.publish(basetopic + '/setup/pid', None, qos=0, retain=True)
        client.publish(basetopic + '/setup/ntc', None, qos=0, retain=True)
        client.publish(basetopic + '/setup/brightness', None, qos=0, retain=True)
        client.publish(basetopic + '/setup/heat', None, qos=0, retain=True)
        client.publish(basetopic + '/setup/calibratehigh', None, qos=0, retain=True)
        client.publish(basetopic + '/setup/calibratelow', None, qos=0, retain=True)
        client.publish(basetopic + '/parameters/level', None, qos=0, retain=True)
        client.publish(basetopic + '/parameters/targettemp', None, qos=0, retain=True)
        client.publish(basetopic + '/parameters/temperature/ntc', None, qos=0, retain=True)

    elif devtype == 'refrigerator':
        client.publish(basetopic + '/sensorsetup', None, qos=0, retain=True)

def clean_inactive_devices():
    while (True):
        try:
            msg = cleanqueue.get(block=False)
            clean_topics(msg)

        except Empty:
            print(datetime.utcnow(),"Nothing to clean")
            return


def sendSetup():
    global lastRead

    try:
        f = open(rundir + "heatsetup.json","r")
        data = f.read()
    except:
        print(datetime.utcnow(),"maybe",rundir + setupfile, "does not exist.")            
        return

    topic = mqtt_broker.topic_prefix + "/heating/setup"
    client.publish(topic, data, qos=0, retain=True) 
    print(datetime.utcnow(),"read heatsetup from disk and insert it to topic")
    f.close()
    lastRead = int(time.time())


def on_message(client, userdata, message):
    if (len(message.payload)):
        msgqueue.put(message)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        connected = True
    else:
        print(datetime.utcnow(),"connection failed, rc=",rc)
        connected = False


def on_disconnect(client, userdata, rc):
    print(datetime.utcnow(),"disconnected")
    if rc != 7:
        try:
            client.reconnect()
        except:
            print(datetime.utcnow(),"reconnect failed, waiting...")
            time.sleep(30)
    else:
        time.sleep(1)



msgqueue = Queue(maxsize=3)
cleanqueue = Queue(maxsize=5)

client = mqtt.Client("setupstorage" + str(os.getpid()))
client.on_connect = on_connect
client.on_message = on_message

client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port = mqtt_broker.port, keepalive=60)
print(datetime.utcnow(), "Start")
client.loop_start()

sendSetup()

topics = [(mqtt_broker.topic_prefix + "/heating/setup",0),
          (mqtt_broker.topic_prefix + "/devices/#",0),
          (mqtt_broker.topic_prefix + "/+/+/tempsensors",0)]
client.subscribe(topics)


while True:
    try:
        if cleanqueue.empty():
            waittime = None
        else:
            waittime = 10
        data = msgqueue.get(block=True, timeout=waittime)
        if data is None:
            continue
        processData(data)

    except KeyboardInterrupt:
        client.disconnect()
        exit(0)

    except json.decoder.JSONDecodeError as e:
        print(datetime.utcnow(), "json:", e)
        print(datetime.utcnow(), data)

    except Empty:
        print(datetime.utcnow(),"Timeout")
        clean_inactive_devices()

    except:
        raise        
