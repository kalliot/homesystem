#!/usr/bin/env python

import time
from datetime import datetime
from datetime import timezone
import paho.mqtt.client as mqtt 
import os
import influxdb_client
import json
import sys
from queue import Queue
from influxdb_client.client.write_api import SYNCHRONOUS
from influxdb_client.domain.write_precision import WritePrecision

sys.path.insert(1, '../config')
from influx_credentials import *

#next variables must be defined in ../config/influx_credentials.py
#url="http://xxxx:8086"
#bucket = "yourinfluxbucket"
#org = "yourinfluxorganization"
#token = "yourinfluxtoken"
#broker_address="yourmqttbrokeripaddress"

wattsPerTick = 33

def saveData(myData):

    if (myData['id'] != 'pulse277998'):
        print("publisher id is wrong, nothing done. ",myData['id'])
        return

    dbclient = influxdb_client.InfluxDBClient(
        url=url,
        token=token,
        org=org
    )
    write_api = dbclient.write_api(write_options=SYNCHRONOUS)

    value = int(myData['value'])
    watts = wattsPerTick * value;
    p = influxdb_client.Point("watts").tag("name", "electricity").field("consumed", watts).time(1000 * myData['ts'],write_precision=WritePrecision.MS)
    write_api.write(bucket=bucket, org=org, record=p)
       
    now = int(datetime.now(timezone.utc).timestamp())
    print(datetime.now(), "count=", value, ":", watts, "W delay:",now - myData['ts'])


def on_message(client, userdata, message):
    msgqueue.put(message.payload)

def logger(client, userdata, level, buff):
    print("level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        client.subscribe("home/kallio/+/parameters/count")
        connected = True
    else:
        print("connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    client.reconnect()

msgqueue = Queue(maxsize=4)    
#broker_address="192.168.101.231"
pid = os.getpid()
client = mqtt.Client("influx_electricity_saver:" + str(pid)) #create new instance
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect
client.connect(broker_address,port=1883, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()


while (True):
    data = msgqueue.get(block=True)
    if data is None:
        continue
    saveData(json.loads(data))
    sys.stdout.flush()
