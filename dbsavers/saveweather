#!/usr/bin/env python

from datetime import datetime
import paho.mqtt.client as mqtt 
import os
import time
import influxdb_client
import json
import sys
import RPi.GPIO as GPIO
from queue import Queue

import influxdb_client
from influxdb_client.client.write_api import SYNCHRONOUS
from influxdb_client.domain.write_precision import WritePrecision

sys.path.insert(1, '/home/pi/config')
from setup import *


def saveData(recData):
    storage = "yearly"

    client = influxdb_client.InfluxDBClient(
        url=influx_credentials.url,
        token=influx_credentials.token,
        org=influx_credentials.org
    )

    if (recData['id'] == "weather"):
       write_api = client.write_api(write_options=SYNCHRONOUS)
       ts = int(recData['ts'])
       print(ts, datetime.fromtimestamp(ts))

       p = influxdb_client.Point("weather").tag("name","forecast")
       p.time(ts,write_precision=WritePrecision.S)
       p.field("uvindex", int(recData['uvindex']))
       p.field("radiation", int(recData['solarradiation']))
       if (recData['solarenergy']):
           p.field("energy", float(recData['solarenergy']))
       p.field("snow", int(recData['snow']))
       p.field("cloudcover", int(recData['cloudcover']))
       p.field("temperature", float(recData['temperature']))
       p.field("dew", float(recData['dew']))
       write_api.write(bucket=storage, org=influx_credentials.org, record=p)


def on_message(client, userdata, message):
    msgqueue.put(message.payload)

def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        client.subscribe(mqtt_broker.topic_prefix + "/weather/#")
        connected = True
    else:
        print("connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    if rc!=7:
        try:
            client.reconnect()
        except:
            print(datetime.now(),"reconnect failed, waiting...")
            time.sleep(30)
        
    else:
        time.sleep(30)


led = 13
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(led, GPIO.OUT)

msgqueue = Queue(maxsize=25)    
pid = os.getpid()

client = mqtt.Client("influx_weather_saver:" + str(pid))
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port=mqtt_broker.port, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()

while (True):
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        GPIO.output(led, GPIO.LOW)
        saveData(json.loads(data))
        sys.stdout.flush()
        GPIO.output(led, GPIO.HIGH)

    except KeyboardInterrupt:
        client.disconnect()
        client.loop_stop()
        exit(0)

    except:
        raise
