#!/usr/bin/env python

from datetime import datetime
import paho.mqtt.client as mqtt 
import os
from time import sleep
import influxdb_client
import json
import sys
from queue import Queue
from influxdb_client.client.write_api import SYNCHRONOUS
from influxdb_client.domain.write_precision import WritePrecision


sys.path.insert(1, '/home/pi/config')
from influx_credentials import *

#Charging is on:
#home/kallio/0000000006133b1d/battery 
#{"id": "battery", 
#    "dev": "0000000006133b1d", 
#    "ts": 1680518645, 
#    "PiVccVolt": 5.328, 
#    "PiIddAmps": 380.65601345668625, 
#    "BatVccVolt": 4.208, 
#    "BatIddAmps": 58.04878048780488, 
#    "McuVccVolt": 3306, 
#    "BatPinCVolt": 4233,
#    "ChargeTypeCVolt": 16, 
#    "ChargeMicroVolt": 5250, 
#    "BatTemperature": 47, 
#}

#Running on batteries:
#home/kallio/0000000006133b1d/battery
#    {"id": "battery",
#    "dev": "0000000006133b1d",
#    "ts": 1680521150,
#    "PiVccVolt": 5.244,
#    "PiIddAmps": 388.89823380992425,
#    "BatVccVolt": 4.16,
#    "BatIddAmps": -898.048780487805,
#    "McuVccVolt": 3301,
#    "BatPinCVolt": 4144,
#    "ChargeTypeCVolt": 48,
#    "ChargeMicroVolt": 19,
#    "BatTemperature": 47,
#}


def saveData(recData):
    storage = "forever"

    client = influxdb_client.InfluxDBClient(
        url=influx_credentials.url,
        token=influx_credentials.token,
        org=influx_credentials.org
    )

    ts = int(recData['ts'])
    temperature = int(recData['BatTemperature'])
    print(datetime.now(),msgqueue.qsize(), datetime.fromtimestamp(ts), temperature)

    write_api = client.write_api(write_options=SYNCHRONOUS)
    p = influxdb_client.Point("battery").tag("device",recData['dev'])
    p.time(1000 * ts,write_precision=WritePrecision.MS)
    p.field("temperature", temperature)
    p.field("McuVccVolt",float(int(recData['McuVccVolt'])/1000))
    p.field("PiVccVolt",float(recData['PiVccVolt']))
    p.field("BatVccVolt",float(recData['BatVccVolt']))
    p.field("PiIddAmps",float(recData['PiIddAmps']))
    p.field("BatPinCVolt",float(int(recData['BatPinCVolt'])/1000))
    p.field("ChargeTypeCVolt",int(recData['ChargeTypeCVolt']))
    p.field("ChargeMicroVolt",int(recData['ChargeMicroVolt']))
    write_api.write(bucket=storage, org=influx_credentials.org, record=p)


def on_message(client, userdata, message):
    msgqueue.put(message.payload)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        client.subscribe("home/kallio/+/battery")
        connected = True
    else:
        print("connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    if rc!=7:
        client.reconnect()
    else:
        sleep(30)          


msgqueue = Queue(maxsize=5)
pid = os.getpid()

client = mqtt.Client("influx_ups_saver:" + str(pid))
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port=mqtt_broker.port, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()

while (True):
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        saveData(json.loads(data))
        sys.stdout.flush()

    except KeyboardInterrupt:
        client.disconnect()
        exit(0)

    except:
        raise        
