#!/usr/bin/env python

from datetime import datetime
import paho.mqtt.client as mqtt 
import os
import time
import influxdb_client
import json
import sys
import RPi.GPIO as GPIO
from queue import Queue

import influxdb_client
from influxdb_client.client.write_api import SYNCHRONOUS
from influxdb_client.domain.write_precision import WritePrecision

sys.path.insert(1, '/home/pi/config')
from setup import *

forcedSaveInterval = 900

def Json2variables(jsonData, variables):
    for variable in variables:
        if variable.type == 0:
            val = float(jsonData[variable.name])
            if variable.value != val:
                print(datetime.now(),"param", variable.dispname , "changed from", variable.value,"to", val)
                variable.value = val
                variable.changed = True

        elif variable.type == 1:
            val = int(jsonData[variable.name])
            if variable.value != val:
                print(datetime.now(),"param", variable.dispname, "changed from", variable.value,"to", val)
                variable.value = val
                variable.changed = True

        elif variable.type == 2:
            val = bool(jsonData[variable.name])
            if variable.value != val:
                print(datetime.now(),"param", variable.dispname, "changed from", variable.value,"to", val)
                variable.value = val
                variable.changed = True

        else:
            print(datetime.now(), "Error: unhandled variable type", variable.type,"for variable", variable.name)


class dbvariable:
    def __init__(self, name, dispname, vartype):
        self.name = name
        self.dispname = dispname
        self.type = vartype 
        self.changed = False
        if vartype == 0:
            self.value = 0.0
        elif vartype == 1:
            self.value = 0
        elif vartype == 2:    
            self.value = False
        else:
            self.value = 0


class thermostat_hc:
    def __init__(self, postfix, write_api, storage):
        self.write_api = write_api
        self.storage = storage
        self.lastsave = 0
        self.postfix = postfix
        self.variables = [dbvariable("seltemp",       "seltemp",              0),
                          dbvariable("roominfluence", "roominfluence",        0),
                          dbvariable("curroominfl",   "curroominfl",          0),
                          dbvariable("remoteseltemp", "remoteseltemp",        0)]


    def saveData(self, data):
        changedCnt = 0
        Json2variables(data,self.variables)
        ts = int(time.time())
        GPIO.output(led, GPIO.LOW)
        p = influxdb_client.Point("heatpump").tag("name","thermostat_" + self.postfix)
        if (ts - self.lastsave) > forcedSaveInterval:
            for variable in self.variables:
                p.field(variable.dispname, variable.value)
                variable.changed = False
            self.write_api.write(bucket=self.storage, org=influx_credentials.org, record=p)
            self.lastsave = ts
            print(datetime.now(), "saved all thermostat", self.postfix, "variables by timeout")
        else:
            for variable in self.variables:
                if variable.changed:
                    p.field(variable.dispname, variable.value)
                    variable.changed = False
                    changedCnt += 1
            if (changedCnt):
                self.write_api.write(bucket=self.storage, org=influx_credentials.org, record=p)
                print(datetime.now(), "thermostat", self.postfix, "saved", changedCnt, "parameters")
        GPIO.output(led, GPIO.HIGH)


class thermostat:
    def __init__(self, write_api, storage):
        self.write_api = write_api
        self.storage = storage
        self.lastsave = 0
        self.variables = [dbvariable("dampedoutdoortemp", "dampedoutdoortemp",   0)]


    def saveData(self, data):
        changedCnt = 0
        Json2variables(data,self.variables)
        ts = int(time.time())
        GPIO.output(led, GPIO.LOW)
        p = influxdb_client.Point("heatpump").tag("name","thermostat")
        if (ts - self.lastsave) > forcedSaveInterval:
            for variable in self.variables:
                p.field(variable.dispname, variable.value)
                variable.changed = False
            self.write_api.write(bucket=self.storage, org=influx_credentials.org, record=p)
            self.lastsave = ts
            print(datetime.now(), "saved all thermostat variables by timeout")
        else:
            for variable in self.variables:
                if variable.changed:
                    p.field(variable.dispname, variable.value)
                    variable.changed = False
                    changedCnt += 1
            if (changedCnt):
                self.write_api.write(bucket=self.storage, org=influx_credentials.org, record=p)
                print(datetime.now(), "thermostat saved", changedCnt, "parameters")
        GPIO.output(led, GPIO.HIGH)



class boiler:
    def __init__(self, write_api, storage):
        self.write_api = write_api
        self.storage = storage
        self.lastsave = 0
        self.variables = [dbvariable("outdoortemp", "outdoortemp",              0),
                          dbvariable("curflowtemp", "curflowtemp",              0),
                          dbvariable("rettemp",     "rettemp",                  0),
                          dbvariable("hppower",     "hppower",                  1),
                          dbvariable("absburnpow",  "absburnpow",               1),
                          dbvariable("curburnpow",  "curburnpow",               1),
                          dbvariable("selburnpow",  "selburnpow",               1),
                          dbvariable("hptc0",       "heat_carreir_ret",         0),
                          dbvariable("hptc1",       "heat_carrier_fwd",         0),
                          dbvariable("hptc3",       "condencer_temp",           0),
                          dbvariable("hptr1",       "compressor_temp",          0),
                          dbvariable("hptr3",       "condencer_output_temp",    0),
                          dbvariable("hptr4",       "evaporator_in_temp",       0),
                          dbvariable("hptr5",       "compressor_in_temp",       0),
                          dbvariable("hptr6",       "compressor_out_temp",      0),
                          dbvariable("hptl2",       "air_in_temp",              0),
                          dbvariable("hppl1",       "low_press_side_temp",      0),
                          dbvariable("hpph1",       "high_pressure_side_temp",  0),
                          dbvariable("hpcompspd",   "compressor_speed",         1),
                          dbvariable("hpcircspd",   "circulation_pump_speed",   1),
                          dbvariable("auxheatmix",  "auxheatmix",               0)]

    def saveData(self, data):
        changedCnt = 0
        Json2variables(data,self.variables)

        ts = int(time.time())
        GPIO.output(led, GPIO.LOW)
        p = influxdb_client.Point("heatpump").tag("name","boiler")
        p.time(ts,write_precision=WritePrecision.S)
        if (ts - self.lastsave) > forcedSaveInterval:
            for variable in self.variables:
                p.field(variable.dispname, variable.value)
                variable.changed = False
            self.write_api.write(bucket=self.storage, org=influx_credentials.org, record=p)
            self.lastsave = ts
            print(datetime.now(), "saved all boiler variables by timeout")
        else:
            for variable in self.variables:
                if variable.changed:
                    p.field(variable.dispname, variable.value)
                    variable.changed = False
                    changedCnt += 1
            if (changedCnt):
                self.write_api.write(bucket=self.storage, org=influx_credentials.org, record=p)
                print(datetime.now(), "boiler saved", changedCnt, "parameters")
        GPIO.output(led, GPIO.HIGH)


class mixer:
    def __init__(self, prefix, write_api, storage):
        self.write_api = write_api
        self.storage = storage
        self.prefix = prefix
        self.lastsave = 0

        self.variables = [dbvariable("flowtemphc",  "flowtemphc",   0),
                          dbvariable("valvestatus", "valvestatus",  1),
                          dbvariable("pumpstatus",  "pumpstatus",   2),
                          dbvariable("flowsettemp", "flowsettemp",  0)]

    def saveData(self, data):
        changedCnt = 0

        if not (data.get(self.prefix) is None):
            subdata = data[self.prefix]
        else:
            return

        Json2variables(subdata,self.variables)
        ts = int(time.time())
        GPIO.output(led, GPIO.LOW)
        p = influxdb_client.Point("heatpump").tag("name","mixer")
        p.time(ts,write_precision=WritePrecision.S)

        if (ts - self.lastsave) > forcedSaveInterval:
            for variable in self.variables:
                p.field(self.prefix + variable.dispname, variable.value)
                variable.changed = False
            self.write_api.write(bucket=self.storage, org=influx_credentials.org, record=p)
            self.lastsave = ts
            print(datetime.now(), "saved all mixer variables by timeout")
        else:
            for variable in self.variables:
                if variable.changed:
                    p.field(self.prefix + variable.dispname, variable.value)
                    variable.changed = False
                    changedCnt += 1
            if (changedCnt):
                self.write_api.write(bucket=self.storage, org=influx_credentials.org, record=p)
                print(datetime.now(), "mixer saved", changedCnt, "parameters")
        GPIO.output(led, GPIO.HIGH)


def saveData(recData):
    global mixer1, mixer2, boiler1, thermostat1

    arr = recData.topic.split("/")
    item = arr[1]

    if (item == "boiler_data"):
        data = json.loads(recData.payload)
        boiler1.saveData(data)

    elif item == "thermostat_data":
        data = json.loads(recData.payload)
        thermostat1.saveData(data)
        thermostat_hc1.saveData(data['hc1'])
        thermostat_hc2.saveData(data['hc2'])

    elif item == "mixer_data":
        data = json.loads(recData.payload)
        mixer1.saveData(data)
        mixer2.saveData(data)

    else:
        print(datetime.now(), item, "not handled")    


def on_message(client, userdata, message):
    msgqueue.put(message)

def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        client.subscribe("ems-esp/#")
        connected = True
    else:
        print("connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    if rc!=7:
        try:
            client.reconnect()
        except:
            print(datetime.now(),"reconnect failed, waiting...")
            time.sleep(30)
        
    else:
        time.sleep(30)


led = 13
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(led, GPIO.OUT)

msgqueue = Queue(maxsize=25)    
pid = os.getpid()

infclient = influxdb_client.InfluxDBClient(
    url=influx_credentials.url,
    token=influx_credentials.token,
    org=influx_credentials.org
)

write_api = infclient.write_api(write_options=SYNCHRONOUS)


mixer1 = mixer('hc1',write_api, "weekly")
mixer2 = mixer('hc2',write_api, "weekly")
boiler1 = boiler(write_api, "weekly")
thermostat1 = thermostat(write_api, "weekly")
thermostat_hc1 = thermostat_hc('hc1', write_api, "weekly")
thermostat_hc2 = thermostat_hc('hc2', write_api, "weekly")

client = mqtt.Client("influx_bosch_saver:" + str(pid))
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port=mqtt_broker.port, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()

while (True):
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        saveData(data)
        sys.stdout.flush()

    except KeyboardInterrupt:
        client.disconnect()
        client.loop_stop()
        exit(0)

    except:
        raise
