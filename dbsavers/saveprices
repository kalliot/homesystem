#!/usr/bin/env python

from datetime import datetime
import paho.mqtt.client as mqtt 
import os
import influxdb_client
import json
from time import sleep
import sys
import RPi.GPIO as GPIO
from queue import Queue
from influxdb_client.client.write_api import SYNCHRONOUS
from influxdb_client.domain.write_precision import WritePrecision


sys.path.insert(1, '/home/pi/config')
from influx_credentials import *


def saveData(recData):
    storage = "forever"

    client = influxdb_client.InfluxDBClient(
        url=influx_credentials.url,
        token=influx_credentials.token,
        org=influx_credentials.org
    )

    ts = int(recData['ts'])
    cents = int(recData['price'])
    print(datetime.now(),msgqueue.qsize(), datetime.fromtimestamp(ts), cents)

    write_api = client.write_api(write_options=SYNCHRONOUS)
    p = influxdb_client.Point("euros").tag("name","elprice").field("price", cents).time(1000 * ts,write_precision=WritePrecision.MS)
    write_api.write(bucket=storage, org=influx_credentials.org, record=p)


def on_message(client, userdata, message):
    msgqueue.put(message.payload)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        client.subscribe("home/kallio/elprice/#")
        connected = True
    else:
        print("connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    if rc!=7:
        client.reconnect()
    else:
        sleep(30)
 

led = 13
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(led, GPIO.OUT)

msgqueue = Queue(maxsize=25)
pid = os.getpid()

client = mqtt.Client("influx_elprice_saver:" + str(pid))
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port=mqtt_broker.port, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()

while (True):
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        GPIO.output(led, GPIO.LOW)
        saveData(json.loads(data))
        sys.stdout.flush()
        GPIO.output(led, GPIO.HIGH)

    except KeyboardInterrupt:
        client.disconnect()
        GPIO.output(led, GPIO.HIGH)
        exit(0)

    except:
        raise
