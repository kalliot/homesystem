#!/usr/bin/env python

import time
from datetime import datetime
from datetime import timezone
import paho.mqtt.client as mqtt 
import os
import influxdb_client
import json
import sys
import RPi.GPIO as GPIO
from queue import Queue
from influxdb_client.client.write_api import SYNCHRONOUS
from influxdb_client.domain.write_precision import WritePrecision

sys.path.insert(1, '/home/pi/koti/config')
from setup import *


def saveData(myData):

    dbclient = influxdb_client.InfluxDBClient(
        url=influx_credentials.url,
        token=influx_credentials.token,
        org=influx_credentials.org
    )
    write_api = dbclient.write_api(write_options=SYNCHRONOUS)

    value = int(myData['power'])
    p = influxdb_client.Point("watts").tag("name", "electricity").field("produced", value).time(1000 * myData['ts'],write_precision=WritePrecision.MS)
    write_api.write(bucket="weekly", org=influx_credentials.org, record=p)
       
    print(datetime.now(), "watts=", value)


def on_message(client, userdata, message):
    msgqueue.put(message.payload)

def logger(client, userdata, level, buff):
    print("level=",level," buff=",buff)


def on_connect(client, userdata, flags, rc):
    global connected
    if (rc==0):
        client.subscribe("home/kallio/phase/all/elproduction")
        connected = True
    else:
        print("connection failed, rc=",rc)            
        connected = False

def on_disconnect(client, userdata, rc):
    if rc!=7:
        client.reconnect()
    else:
        time.sleep(30)          
 

led = 13
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(led, GPIO.OUT)

msgqueue = Queue(maxsize=4)    
pid = os.getpid()

client = mqtt.Client("influx_produced_power_saver:" + str(pid)) #create new instance
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect
client.connect(mqtt_broker.address,port=mqtt_broker.port, keepalive=60) 
print(datetime.now(), "Start")
client.loop_start()


while (True):
    try:
        data = msgqueue.get(block=True)
        if data is None:
            continue
        GPIO.output(led, GPIO.LOW)
        saveData(json.loads(data))
        sys.stdout.flush()
        GPIO.output(led, GPIO.HIGH)

    except KeyboardInterrupt:
        client.disconnect()
        client.loop_stop()
        exit(0)

    except:
        raise
